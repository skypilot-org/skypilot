name: Release Publish

on:
  pull_request:
    types: [closed]
    branches:
      - 'releases/**'

jobs:
  extract-version:
    runs-on: ubuntu-latest
    if: startsWith(github.head_ref, 'test_releases/')
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}

      - name: Extract version from PR base branch
        id: extract_version
        run: |
          BASE_BRANCH="${{ github.base_ref }}"
          VERSION=$(echo "$BASE_BRANCH" | sed 's/releases\///')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version extracted: $VERSION"

  build-package:
    needs: extract-version
    if: github.event.pull_request.merged == true && startsWith(github.head_ref, 'test_releases/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '23'
          cache: 'npm'
          cache-dependency-path: 'sky/dashboard/package-lock.json'
      - name: Install dashboard dependencies
        run: |
          cd sky/dashboard
          npm ci
      - name: Build dashboard
        run: |
          cd sky/dashboard
          npm run build

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install pypa/build
        run: >-
          python -m
          pip install
          build
          --user

      - name: Build a binary wheel and a source tarball
        run: >-
          python -m
          build
          --sdist
          --wheel
          --outdir dist/
          .

      - name: Upload distribution artifacts
        uses: actions/upload-artifact@v4
        with:
          name: skypilot-artifacts-skypilot
          path: dist/

  publish-and-validate-test-pypi:
    needs: [extract-version, build-package]
    uses: ./.github/workflows/publish-and-validate.yml
    with:
      package_name: skypilot
      expected_version: ${{ needs.extract-version.outputs.version }}
      repository_type: 'test-pypi'
    secrets: inherit

  publish-and-validate-pypi:
    needs: [extract-version, publish-and-validate-test-pypi]
    uses: ./.github/workflows/publish-and-validate.yml
    with:
      package_name: skypilot
      expected_version: ${{ needs.extract-version.outputs.version }}
      repository_type: 'pypi'
    secrets: inherit

  trigger-helm-release:
    needs: [publish-and-validate-pypi]
    uses: ./.github/workflows/helm-docker-release.yaml
    with:
      package_name: skypilot
    secrets: inherit

  create-release:
    needs: [extract-version, publish-and-validate-pypi]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT_FOR_RELEASE }}

      - name: Create and push tag
        run: |
          VERSION="${{ needs.extract-version.outputs.version }}"
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          git tag -a "v${VERSION}" -m "Release v${VERSION}"
          git push origin "v${VERSION}"

      - name: Find previous release from PyPI
        id: find_previous_release
        run: |
          VERSION="${{ needs.extract-version.outputs.version }}"
          echo "Current release version: ${VERSION}"

          # Get all versions from PyPI using JSON API
          ALL_VERSIONS=$(curl -s https://pypi.org/pypi/skypilot/json | jq -r '.releases | keys[]' | sort -V)
          echo "All PyPI versions:"
          echo "$ALL_VERSIONS"

          # Find the version just before the current one
          PREVIOUS_VERSION=$(echo "$ALL_VERSIONS" | grep -B1 "^${VERSION}$" | head -1 || echo "")

          if [ -n "$PREVIOUS_VERSION" ] && [ "$PREVIOUS_VERSION" != "$VERSION" ]; then
            PREVIOUS_TAG="v${PREVIOUS_VERSION}"
            echo "Found previous release version: ${PREVIOUS_VERSION}"
            echo "Previous tag: ${PREVIOUS_TAG}"
            echo "previous_tag=${PREVIOUS_TAG}" >> $GITHUB_OUTPUT
          else
            echo "Error: No previous release version found on PyPI for comparison"
            echo "Current version: ${VERSION}"
            echo "Available versions:"
            echo "$ALL_VERSIONS"
            exit 1
          fi

      - name: Create GitHub Release with Previous Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT_FOR_RELEASE }}
        run: |
          VERSION="${{ needs.extract-version.outputs.version }}"
          PREVIOUS_TAG="${{ steps.find_previous_release.outputs.previous_tag }}"

          # Create release notes prefix
          cat > release_prefix.md << EOF
          ## SkyPilot v$VERSION

          Get it now with:

          \`\`\`bash
          uv pip install "skypilot>=$VERSION"
          \`\`\`

          ---

          EOF

          echo "Creating release from $PREVIOUS_TAG to v$VERSION"
          gh release create "v$VERSION" \
            --title "Release v$VERSION" \
            --notes-file release_prefix.md \
            --generate-notes \
            --previous-tag "$PREVIOUS_TAG" \
            --draft

  cleanup-branches:
    needs: extract-version
    if: github.event.pull_request.merged == false && startsWith(github.head_ref, 'test_releases/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete branches
        run: |
          VERSION="${{ needs.extract-version.outputs.version }}"
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"

          # Check if test branch exists and delete it
          TEST_BRANCH="test_releases/${VERSION}"
          if git ls-remote --heads origin ${TEST_BRANCH} | grep ${TEST_BRANCH}; then
            echo "Deleting test branch: ${TEST_BRANCH}"
            git push origin --delete ${TEST_BRANCH}
          else
            echo "Test branch ${TEST_BRANCH} does not exist, skipping"
          fi
