name: Rust CI

on:
  push:
    branches: [main, master, "cursor/**"]
    paths:
      - 'rust/**'
      - '.github/workflows/rust-ci.yml'
  pull_request:
    branches: [main, master]
    paths:
      - 'rust/**'
      - '.github/workflows/rust-ci.yml'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Formatierung pr?fen
  format:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      
      - name: Check formatting
        run: cd rust && cargo fmt --all -- --check

  # Clippy Linter
  clippy:
    name: Clippy Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: rust/target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run clippy
        run: cd rust && cargo clippy --all-targets --all-features -- -D warnings

  # Build und Test (Matrix f?r mehrere Plattformen)
  build-and-test:
    name: Build & Test (${{ matrix.os }}, Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            rust/target
          key: ${{ runner.os }}-cargo-${{ matrix.python-version }}-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Install maturin
        run: pip install maturin pytest pytest-benchmark
      
      - name: Build Rust module
        run: cd rust/skypilot-utils && maturin develop --release
      
      - name: Test Python imports
        run: python -c "import sky_rs; print(f'Loaded sky_rs version {sky_rs.__version__}')"
      
      - name: Run Rust unit tests (native)
        run: cd rust && cargo build --lib
        continue-on-error: true  # PyO3 tests need Python context
      
      - name: Create Python integration test
        run: |
          cat > /tmp/test_rust_integration.py << 'EOF'
          import sky_rs
          import tempfile
          import os
          
          def test_io_functions():
              # Test read_last_n_lines
              with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.txt') as f:
                  for i in range(100):
                      f.write(f"Line {i}\n")
                  fname = f.name
              
              try:
                  lines = sky_rs.read_last_n_lines(fname, 5)
                  assert len(lines) == 5
                  assert "Line 99" in lines[-1]
              finally:
                  os.unlink(fname)
              
              # Test hash_file
              with tempfile.NamedTemporaryFile(mode='w', delete=False) as f:
                  f.write("test content")
                  fname = f.name
              
              try:
                  hash_val = sky_rs.hash_file(fname, "sha256")
                  assert len(hash_val) == 64  # SHA256 hex length
              finally:
                  os.unlink(fname)
              
              # Test find_free_port
              port = sky_rs.find_free_port(10000)
              assert 10000 <= port < 65535
          
          def test_string_functions():
              # Test base36_encode
              result = sky_rs.base36_encode("ff")
              assert isinstance(result, str)
              assert len(result) > 0
              
              # Test format_float
              result = sky_rs.format_float(1234567.89, 2)
              assert "M" in result  # Should use M suffix
              
              # Test truncate_long_string
              long_str = "A" * 1000
              result = sky_rs.truncate_long_string(long_str, 20, "...")
              assert len(result) == 20
              assert result.endswith("...")
          
          def test_system_functions():
              # Test get_cpu_count
              cpus = sky_rs.get_cpu_count()
              assert cpus > 0
              assert cpus < 1024
              
              # Test get_mem_size_gb
              mem = sky_rs.get_mem_size_gb()
              assert mem > 0
              assert mem < 100000  # Less than 100TB
          
          if __name__ == "__main__":
              test_io_functions()
              print("? I/O functions tests passed")
              test_string_functions()
              print("? String functions tests passed")
              test_system_functions()
              print("? System functions tests passed")
              print("\n? All Rust integration tests passed!")
          EOF
      
      - name: Run integration tests
        run: python /tmp/test_rust_integration.py

  # Benchmarks (nur auf Linux f?r Konsistenz)
  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            rust/target
          key: ${{ runner.os }}-cargo-bench-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run Criterion benchmarks
        run: cd rust && cargo bench --no-fail-fast
      
      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: rust/target/criterion/
          retention-days: 30

  # Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install cargo-audit
        run: cargo install cargo-audit
      
      - name: Run security audit
        run: cd rust && cargo audit
        continue-on-error: true  # Don't fail on advisories yet
