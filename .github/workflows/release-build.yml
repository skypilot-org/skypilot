name: Release Build

on:
  schedule:
    - cron: '0 0 1,15 * *'  # Runs at 00:00 on the 1st and 15th of each month (UTC)
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version (e.g., 0.9.0)'
        required: false
        type: string
      skip_version_checks:
        description: 'Skip version verification steps'
        required: false
        type: boolean
        default: false

jobs:
  release-build:
    runs-on: ubuntu-latest
    outputs:
      test_branch: ${{ steps.create_test_branch.outputs.test_branch }}
      release_branch: ${{ steps.create_release_branch.outputs.release_branch }}
      release_version: ${{ steps.determine_version.outputs.release_version }}
      new_commit_sha: ${{ steps.create_test_branch.outputs.new_commit_sha }}
      previous_release_branch: ${{ steps.find_previous_release_branch.outputs.previous_release_branch }}

    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
          python-version: '3.10'

      - name: Find latest release from PyPI
        id: find_previous_release_branch
        run: |
          # Get the latest version from PyPI using JSON API
          LATEST_PYPI_VERSION=$(curl -s https://pypi.org/pypi/skypilot/json | jq -r .info.version)
          echo "Latest PyPI version: ${LATEST_PYPI_VERSION}"

          # Determine the base branch for PyPI version
          PREVIOUS_RELEASE_BRANCH="releases/${LATEST_PYPI_VERSION}"
          echo "previous_release_branch=${PREVIOUS_RELEASE_BRANCH}" >> $GITHUB_OUTPUT
          echo "Determined previous release branch: ${PREVIOUS_RELEASE_BRANCH}"

          # Output the latest PyPI version for subsequent steps
          echo "latest_pypi_version=${LATEST_PYPI_VERSION}" >> $GITHUB_OUTPUT

      - name: Get current sky api version
        id: get_current_sky_api_version
        run: |
          echo "Reading current API version from the current checkout..."
          # Extract current API version from the current checked-out state
          CURRENT_SKY_API_VERSION=$(grep "^API_VERSION = " sky/server/constants.py | sed "s/API_VERSION = '\\(.*\\)'/\\1/")
          echo "Current API version (from checkout): ${CURRENT_SKY_API_VERSION}"
          echo "current_sky_api_version=${CURRENT_SKY_API_VERSION}" >> $GITHUB_OUTPUT

      - name: Get latest release sky api version from PyPI
        id: get_latest_release_sky_api_version
        run: |
          LATEST_PYPI_VERSION="${{ steps.find_previous_release_branch.outputs.latest_pypi_version }}"
          # Create and activate uv virtual environment
          echo "Creating uv virtual environment..."
          uv venv --seed ~/pypi-check-env
          echo "Activating virtual environment..."
          source ~/pypi-check-env/bin/activate

          echo "Installing skypilot==${LATEST_PYPI_VERSION} from PyPI using uv..."
          uv pip install --prerelease=allow "azure-cli>=2.65.0"
          uv pip install 'omegaconf>=2.4.0dev3' skypilot==${LATEST_PYPI_VERSION}

          echo "Extracting API version from installed PyPI package..."
          # Store current directory and change to a temporary one to avoid importing local sky package
          ORIGINAL_DIR=$(pwd)
          TEMP_DIR=$(mktemp -d)
          cd "${TEMP_DIR}"
          echo "Changed directory to ${TEMP_DIR} to ensure correct package import."

          # Python command now runs within the activated venv and outside the project directory
          LATEST_PYPI_SKY_API_VERSION=$(python -c "import sky.server.constants; print(sky.server.constants.API_VERSION)")

          # Change back to original directory and clean up temp dir
          cd "${ORIGINAL_DIR}"
          rm -rf "${TEMP_DIR}"
          echo "Restored original directory: ${ORIGINAL_DIR}"

          # Deactivate environment
          deactivate

          if [[ -z "${LATEST_PYPI_SKY_API_VERSION}" ]]; then
            echo "Error: Could not fetch API_VERSION from the installed PyPI package. Python command likely failed."
            exit 1
          fi

          echo "Latest release PyPI API version: ${LATEST_PYPI_SKY_API_VERSION}"
          echo "latest_pypi_sky_api_version=${LATEST_PYPI_SKY_API_VERSION}" >> $GITHUB_OUTPUT

      # Determine release version based on trigger type
      - name: Determine release version
        id: determine_version
        run: |
          CURRENT_SKY_API_VERSION="${{ steps.get_current_sky_api_version.outputs.current_sky_api_version }}"
          LATEST_PYPI_SKY_API_VERSION="${{ steps.get_latest_release_sky_api_version.outputs.latest_pypi_sky_api_version }}"

          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.release_version }}" ]; then
            # Manual trigger with input version provided
            RELEASE_VERSION="${{ github.event.inputs.release_version }}"
            echo "Using manually specified version: ${RELEASE_VERSION}"
          else
            # Scheduled trigger or manual trigger without version - extract version from latest release and increment patch
            LATEST_VERSION="${{ steps.find_previous_release_branch.outputs.latest_pypi_version }}"
            # Split version into parts
            MAJOR=$(echo $LATEST_VERSION | cut -d. -f1)
            MINOR=$(echo $LATEST_VERSION | cut -d. -f2)
            PATCH=$(echo $LATEST_VERSION | cut -d. -f3)
            if [ "${CURRENT_SKY_API_VERSION}" -le "${LATEST_PYPI_SKY_API_VERSION}" ]; then
              # Increment patch version
              NEW_PATCH=$((PATCH + 1))
              RELEASE_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
            else
              # Increment minor version
              NEW_MINOR=$((MINOR + 1))
              RELEASE_VERSION="${MAJOR}.${NEW_MINOR}.0"
            fi
            echo "Incrementing from ${LATEST_VERSION} to ${RELEASE_VERSION}"
          fi
          echo "release_version=${RELEASE_VERSION}" >> $GITHUB_OUTPUT

      - name: Verify release version > latest PyPI version
        id: verify_version
        if: ${{ !github.event.inputs.skip_version_checks }}
        run: |
          RELEASE_VERSION="${{ steps.determine_version.outputs.release_version }}"
          echo "Validated release version: ${RELEASE_VERSION}"

          # Get the latest version from PyPI using JSON API
          LATEST_PYPI_VERSION="${{ steps.find_previous_release_branch.outputs.latest_pypi_version }}"
          echo "Latest PyPI version: ${LATEST_PYPI_VERSION}"

          # Parse latest PyPI version
          PYPI_MAJOR=$(echo $LATEST_PYPI_VERSION | cut -d. -f1)
          PYPI_MINOR=$(echo $LATEST_PYPI_VERSION | cut -d. -f2)
          PYPI_PATCH=$(echo $LATEST_PYPI_VERSION | cut -d. -f3)

          # Calculate expected next versions
          NEXT_PATCH_VERSION="${PYPI_MAJOR}.${PYPI_MINOR}.$((PYPI_PATCH + 1))"
          NEXT_MINOR_VERSION="${PYPI_MAJOR}.$((PYPI_MINOR + 1)).0"

          echo "Expected next patch version: ${NEXT_PATCH_VERSION}"
          echo "Expected next minor version: ${NEXT_MINOR_VERSION}"

          # Check if the determined release version is one of the expected next versions
          if [ "${RELEASE_VERSION}" = "${NEXT_PATCH_VERSION}" ] || [ "${RELEASE_VERSION}" = "${NEXT_MINOR_VERSION}" ]; then
            echo "Success: Version check passed. Determined version ${RELEASE_VERSION} is a valid next version."
          else
            echo "Error: Determined release version ${RELEASE_VERSION} must be either the next patch version (${NEXT_PATCH_VERSION}) or the next minor version (${NEXT_MINOR_VERSION}) compared to the latest PyPI version ${LATEST_PYPI_VERSION}."
            exit 1
          fi

      - name: Verify API Version Compatibility
        id: verify_api_version
        if: ${{ !github.event.inputs.skip_version_checks }}
        run: |
          RELEASE_VERSION="${{ steps.determine_version.outputs.release_version }}"
          LATEST_PYPI_VERSION="${{ steps.find_previous_release_branch.outputs.latest_pypi_version }}"
          CURRENT_SKY_API_VERSION="${{ steps.get_current_sky_api_version.outputs.current_sky_api_version }}"
          LATEST_PYPI_SKY_API_VERSION="${{ steps.get_latest_release_sky_api_version.outputs.latest_pypi_sky_api_version }}"

          # Assert current API version >= PyPI API version
          if [[ "${CURRENT_SKY_API_VERSION}" -lt "${LATEST_PYPI_SKY_API_VERSION}" ]]; then
            echo "Error: Current API version (${CURRENT_SKY_API_VERSION}) is less than the latest PyPI API version (${LATEST_PYPI_SKY_API_VERSION})."
            exit 1
          fi
          echo "Assertion passed: Current API version (${CURRENT_SKY_API_VERSION}) >= PyPI API version (${LATEST_PYPI_SKY_API_VERSION})."

          # If API version changed, ensure it's not just a patch release
          if [[ "${CURRENT_SKY_API_VERSION}" -gt "${LATEST_PYPI_SKY_API_VERSION}" ]]; then
            echo "API version has increased from ${LATEST_PYPI_SKY_API_VERSION} to ${CURRENT_SKY_API_VERSION}."

            # Parse versions
            RELEASE_MAJOR=$(echo $RELEASE_VERSION | cut -d. -f1)
            RELEASE_MINOR=$(echo $RELEASE_VERSION | cut -d. -f2)

            PYPI_MAJOR=$(echo $LATEST_PYPI_VERSION | cut -d. -f1)
            PYPI_MINOR=$(echo $LATEST_PYPI_VERSION | cut -d. -f2)

            IS_MINOR_OR_MAJOR_UPGRADE=false
            if [[ "${RELEASE_MAJOR}" -gt "${PYPI_MAJOR}" ]]; then
              IS_MINOR_OR_MAJOR_UPGRADE=true
            elif [[ "${RELEASE_MAJOR}" -eq "${PYPI_MAJOR}" && "${RELEASE_MINOR}" -gt "${PYPI_MINOR}" ]]; then
              IS_MINOR_OR_MAJOR_UPGRADE=true
            fi

            if [[ "${IS_MINOR_OR_MAJOR_UPGRADE}" == "false" ]]; then
              echo "Error: API version changed (${LATEST_PYPI_SKY_API_VERSION} -> ${CURRENT_SKY_API_VERSION}), but the release (${RELEASE_VERSION}) is only a patch upgrade from the latest PyPI version (${LATEST_PYPI_VERSION}). API version changes require a minor or major version bump."
              exit 1
            else
              echo "API version change is accompanied by a minor or major version bump (${LATEST_PYPI_VERSION} -> ${RELEASE_VERSION}). Proceeding."
            fi
          else
            echo "API version has not changed (${LATEST_PYPI_SKY_API_VERSION}). Proceeding."
          fi

      - name: Create release branch
        id: create_release_branch
        run: |
          RELEASE_VERSION="${{ steps.determine_version.outputs.release_version }}"
          BRANCH_NAME="releases/${RELEASE_VERSION}"

          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Check if branch already exists
          if git ls-remote --exit-code --heads origin ${BRANCH_NAME} > /dev/null 2>&1; then
            echo "Error: Release branch ${BRANCH_NAME} already exists. Please manually delete the branch first and then rerun the workflow."
            exit 1
          fi

          # Create release branch
          git checkout -b ${BRANCH_NAME}
          echo "Created release branch: ${BRANCH_NAME}"
          echo "release_branch=${BRANCH_NAME}" >> $GITHUB_OUTPUT

          git push -f origin ${BRANCH_NAME}
          echo "Pushed release branch: ${BRANCH_NAME}"

      - name: Set release version and create test branch
        id: create_test_branch
        run: |
          RELEASE_VERSION="${{ steps.determine_version.outputs.release_version }}"
          BRANCH_NAME="releases/${RELEASE_VERSION}"

          # Checkout the base release branch
          echo "Checking out the release branch ${BRANCH_NAME}..."
          git checkout ${BRANCH_NAME}

          # Make version changes
          echo "Updating __version__ in sky/__init__.py and Dockerfile to ${RELEASE_VERSION}..."
          sed -i "s/__version__ = '.*'/__version__ = '${RELEASE_VERSION}'/g" sky/__init__.py
          sed -i "s/skypilot-nightly\[all\]/skypilot[all]==${RELEASE_VERSION}/g" Dockerfile
          sed -i "s/image: berkeleyskypilot\/skypilot:.*/image: berkeleyskypilot\/skypilot:${RELEASE_VERSION}/g" charts/skypilot/values.yaml

          # Create the test branch from the *current* state (base branch with version bump)
          TEST_BRANCH="test_releases/${RELEASE_VERSION}"
          echo "Creating test branch ${TEST_BRANCH}..."
          git checkout -b ${TEST_BRANCH}

          # Commit the version change on the new test branch
          git add sky/__init__.py
          git add Dockerfile
          git add charts/skypilot/values.yaml
          git commit -m "Release ${RELEASE_VERSION}"

          # Get the new commit SHA from the test branch
          NEW_COMMIT_SHA=$(git rev-parse HEAD)
          echo "new_commit_sha=${NEW_COMMIT_SHA}" >> $GITHUB_OUTPUT
          echo "New commit SHA on ${TEST_BRANCH}: ${NEW_COMMIT_SHA}"

          # Push the new test branch
          echo "Pushing ${TEST_BRANCH}..."
          git push -f origin ${TEST_BRANCH}
          echo "test_branch=${TEST_BRANCH}" >> $GITHUB_OUTPUT

  smoke-tests:
    needs: release-build
    uses: ./.github/workflows/buildkite-trigger-wait.yml
    with:
      commit: ${{ needs.release-build.outputs.new_commit_sha }}
      branch: ${{ needs.release-build.outputs.test_branch }}
      message: "Release ${{ needs.release-build.outputs.release_version }}"
      pipeline: "full-smoke-tests-run"
      timeout_minutes: 240
      wait: true
      fail_on_buildkite_failure: true
    secrets:
      BUILDKITE_TOKEN: ${{ secrets.BUILDKITE_TOKEN }}

  quicktest-core:
    needs: release-build
    uses: ./.github/workflows/buildkite-trigger-wait.yml
    with:
      commit: ${{ needs.release-build.outputs.new_commit_sha }}
      branch: ${{ needs.release-build.outputs.test_branch }}
      message: "Release ${{ needs.release-build.outputs.release_version }}"
      pipeline: "quicktest-core"
      build_env_vars: '{"ARGS": "--base-branch ${{ needs.release-build.outputs.previous_release_branch }}"}'
      timeout_minutes: 180
      wait: true
      fail_on_buildkite_failure: true
    secrets:
      BUILDKITE_TOKEN: ${{ secrets.BUILDKITE_TOKEN }}

  release-tests:
    needs: release-build
    uses: ./.github/workflows/buildkite-trigger-wait.yml
    with:
      commit: ${{ needs.release-build.outputs.new_commit_sha }}
      branch: ${{ needs.release-build.outputs.test_branch }}
      message: "Release ${{ needs.release-build.outputs.release_version }}"
      pipeline: "release"
      wait: false
      fail_on_buildkite_failure: false
    secrets:
      BUILDKITE_TOKEN: ${{ secrets.BUILDKITE_TOKEN }}

  create-pr:
    needs: [release-build, smoke-tests, quicktest-core, release-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Create release branch and PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TEST_BRANCH: ${{ needs.release-build.outputs.test_branch }}
          RELEASE_BRANCH: ${{ needs.release-build.outputs.release_branch }}
          RELEASE_VERSION: ${{ needs.release-build.outputs.release_version }}
          SMOKE_TEST_BUILD: ${{ needs.smoke-tests.outputs.build_number }}
          QUICKTEST_BUILD: ${{ needs.quicktest-core.outputs.build_number }}
          RELEASE_TEST_BUILD: ${{ needs.release-tests.outputs.build_number }}
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Create PR with buildkite links
          PR_BODY="Release ${RELEASE_VERSION}

          Buildkite Test Links:
          - [Full Smoke Tests](https://buildkite.com/skypilot-1/full-smoke-tests-run/builds/${SMOKE_TEST_BUILD}) - $([ "${{ needs.smoke-tests.outputs.build_status }}" == "success" ] && echo "✅ Success" || echo "❌ Failed")
          - [Quicktest Core](https://buildkite.com/skypilot-1/quicktest-core/builds/${QUICKTEST_BUILD}) - $([ "${{ needs.quicktest-core.outputs.build_status }}" == "success" ] && echo "✅ Success" || echo "❌ Failed")
          - [Release Tests](https://buildkite.com/skypilot-1/release/builds/${RELEASE_TEST_BUILD}) - ⏳ (not waiting for completion)

          *Release Tests may take up to 24 hours to complete and might fail due to resource constraints.*"

          echo "Creating PR from ${TEST_BRANCH} to ${RELEASE_BRANCH}"

          gh pr create --base ${RELEASE_BRANCH} --head ${TEST_BRANCH} \
            --title "Release ${RELEASE_VERSION}" \
            --body "${PR_BODY}"
