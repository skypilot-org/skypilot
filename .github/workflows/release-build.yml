name: Release Build

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version (e.g., 0.9.0)'
        required: true
        type: string

jobs:
  release-build:
    runs-on: ubuntu-latest
    outputs:
      test_branch: ${{ steps.commit_changes.outputs.test_branch }}
      smoke_tests_json: ${{ steps.trigger_smoke_tests.outputs.json }}
      quicktest_json: ${{ steps.trigger_quicktest_core.outputs.json }}
      release_test_json: ${{ steps.trigger_release_tests.outputs.json }}
      manual_created_release_branch: ${{ steps.validate_input_version.outputs.manual_created_release_branch }}
      pypi_base_branch: ${{ steps.verify_version.outputs.pypi_base_branch }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Validate Input Version and Branch
        id: validate_input_version
        run: |
          RELEASE_VERSION="${{ github.event.inputs.release_version }}"
          echo "Using manually specified version: ${RELEASE_VERSION}"
          MANUAL_CREATED_RELEASE_BRANCH="releases/${RELEASE_VERSION}"
          echo "Expected manual created release branch: ${MANUAL_CREATED_RELEASE_BRANCH}"

          # Fetch all remote heads and tags
          git fetch --all --tags

          # Check if the release branch exists remotely
          if ! git ls-remote --heads origin ${MANUAL_CREATED_RELEASE_BRANCH} | grep -q refs/heads/${MANUAL_CREATED_RELEASE_BRANCH}; then
            echo "Error: Manual release branch ${MANUAL_CREATED_RELEASE_BRANCH} does not exist remotely."
            exit 1
          else
            echo "Found manual created release branch ${MANUAL_CREATED_RELEASE_BRANCH} remotely."
          fi

          echo "manual_created_release_branch=${MANUAL_CREATED_RELEASE_BRANCH}" >> $GITHUB_OUTPUT

      - name: Verify release version > latest PyPI version
        id: verify_version
        run: |
          RELEASE_VERSION="${{ github.event.inputs.release_version }}"
          echo "Validated release version: ${RELEASE_VERSION}"

          # Get the latest version from PyPI using JSON API
          LATEST_PYPI_VERSION=$(curl -s https://pypi.org/pypi/skypilot/json | python -c "import sys, json; print(json.load(sys.stdin)['info']['version'])")
          echo "Latest PyPI version: ${LATEST_PYPI_VERSION}"

          # Determine the base branch for PyPI version
          PYPI_BASE_BRANCH="releases/${LATEST_PYPI_VERSION}"
          echo "pypi_base_branch=${PYPI_BASE_BRANCH}" >> $GITHUB_OUTPUT
          echo "Determined PyPI base branch for comparison: ${PYPI_BASE_BRANCH}"

          # Parse latest PyPI version
          PYPI_MAJOR=$(echo $LATEST_PYPI_VERSION | cut -d. -f1)
          PYPI_MINOR=$(echo $LATEST_PYPI_VERSION | cut -d. -f2)
          PYPI_PATCH=$(echo $LATEST_PYPI_VERSION | cut -d. -f3)

          # Calculate expected next versions
          NEXT_PATCH_VERSION="${PYPI_MAJOR}.${PYPI_MINOR}.$((PYPI_PATCH + 1))"
          NEXT_MINOR_VERSION="${PYPI_MAJOR}.$((PYPI_MINOR + 1)).0"

          echo "Expected next patch version: ${NEXT_PATCH_VERSION}"
          echo "Expected next minor version: ${NEXT_MINOR_VERSION}"

          # Check if the determined release version is one of the expected next versions
          if [ "${RELEASE_VERSION}" = "${NEXT_PATCH_VERSION}" ] || [ "${RELEASE_VERSION}" = "${NEXT_MINOR_VERSION}" ]; then
            echo "Success: Version check passed. Determined version ${RELEASE_VERSION} is a valid next version."
          else
            echo "Error: Determined release version ${RELEASE_VERSION} must be either the next patch version (${NEXT_PATCH_VERSION}) or the next minor version (${NEXT_MINOR_VERSION}) compared to the latest PyPI version ${LATEST_PYPI_VERSION}."
            exit 1
          fi

      - name: Set release version and commit changes
        id: commit_changes
        run: |
          RELEASE_VERSION="${{ github.event.inputs.release_version }}"
          MANUAL_CREATED_RELEASE_BRANCH="${{ steps.validate_input_version.outputs.manual_created_release_branch }}"

          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Checkout the base release branch
          echo "Checking out manual created release branch ${MANUAL_CREATED_RELEASE_BRANCH}..."
          git checkout ${MANUAL_CREATED_RELEASE_BRANCH}

          # Make version changes
          echo "Updating __version__ in sky/__init__.py and Dockerfile to ${RELEASE_VERSION}..."
          sed -i "s/__version__ = '.*'/__version__ = '${RELEASE_VERSION}'/g" sky/__init__.py
          sed -i "s/skypilot-nightly\[all\]/skypilot[all]==${RELEASE_VERSION}/g" Dockerfile

          # Create the test branch from the *current* state (base branch with version bump)
          TEST_BRANCH="test_releases/${RELEASE_VERSION}"
          echo "Creating test branch ${TEST_BRANCH}..."
          git checkout -b ${TEST_BRANCH}

          # Commit the version change on the new test branch
          git add sky/__init__.py
          git add Dockerfile
          git commit -m "Release ${RELEASE_VERSION}"

          # Get the new commit SHA from the test branch
          NEW_COMMIT_SHA=$(git rev-parse HEAD)
          echo "new_commit_sha=${NEW_COMMIT_SHA}" >> $GITHUB_OUTPUT
          echo "New commit SHA on ${TEST_BRANCH}: ${NEW_COMMIT_SHA}"

          # Push the new test branch
          echo "Pushing ${TEST_BRANCH}..."
          git push -f origin ${TEST_BRANCH}
          echo "test_branch=${TEST_BRANCH}" >> $GITHUB_OUTPUT

      # Trigger Buildkite smoke tests
      - name: Trigger Full Smoke Tests
        id: trigger_smoke_tests
        uses: buildkite/trigger-pipeline-action@v2.3.0
        with:
          buildkite_api_access_token: ${{ secrets.BUILDKITE_TOKEN }}
          pipeline: "skypilot-1/full-smoke-tests-run"
          branch: "${{ steps.commit_changes.outputs.test_branch }}"
          commit: "${{ steps.commit_changes.outputs.new_commit_sha }}"
          message: "Release ${{ github.event.inputs.release_version }}"
          ignore_pipeline_branch_filter: true

      # Trigger Buildkite quicktest-core
      - name: Trigger Quicktest Core
        id: trigger_quicktest_core
        uses: buildkite/trigger-pipeline-action@v2.3.0
        with:
          buildkite_api_access_token: ${{ secrets.BUILDKITE_TOKEN }}
          pipeline: "skypilot-1/quicktest-core"
          branch: "${{ steps.commit_changes.outputs.test_branch }}"
          commit: "${{ steps.commit_changes.outputs.new_commit_sha }}"
          message: "Release ${{ github.event.inputs.release_version }}"
          ignore_pipeline_branch_filter: true
          build_env_vars: '{"ARGS": "--base-branch ${{ steps.verify_version.outputs.pypi_base_branch }}"}'

      # Trigger Buildkite release tests
      - name: Trigger Release Tests
        id: trigger_release_tests
        uses: buildkite/trigger-pipeline-action@v2.3.0
        with:
          buildkite_api_access_token: ${{ secrets.BUILDKITE_TOKEN }}
          pipeline: "skypilot-1/release"
          branch: "${{ steps.commit_changes.outputs.test_branch }}"
          commit: "${{ steps.commit_changes.outputs.new_commit_sha }}"
          message: "Release ${{ github.event.inputs.release_version }}"
          ignore_pipeline_branch_filter: true

  # Call extract-buildkite workflow for each job
  extract-smoke-tests:
    needs: release-build
    uses: ./.github/workflows/extract-buildkite.yml
    with:
      json_data: ${{ needs.release-build.outputs.smoke_tests_json }}

  extract-quicktest:
    needs: release-build
    uses: ./.github/workflows/extract-buildkite.yml
    with:
      json_data: ${{ needs.release-build.outputs.quicktest_json }}

  extract-release-test:
    needs: release-build
    uses: ./.github/workflows/extract-buildkite.yml
    with:
      json_data: ${{ needs.release-build.outputs.release_test_json }}

  wait-for-smoke-tests:
    needs: [release-build, extract-smoke-tests]
    uses: ./.github/workflows/wait-for-buildkite.yml
    with:
      organization: "skypilot-1"
      pipeline: "full-smoke-tests-run"
      build_number: ${{ needs.extract-smoke-tests.outputs.build_number }}
      timeout_minutes: 240
      fail_on_buildkite_failure: false
    secrets:
      BUILDKITE_TOKEN: ${{ secrets.BUILDKITE_TOKEN }}

  wait-for-quicktest-core:
    needs: [release-build, extract-quicktest]
    uses: ./.github/workflows/wait-for-buildkite.yml
    with:
      organization: "skypilot-1"
      pipeline: "quicktest-core"
      build_number: ${{ needs.extract-quicktest.outputs.build_number }}
      timeout_minutes: 180
      fail_on_buildkite_failure: false
    secrets:
      BUILDKITE_TOKEN: ${{ secrets.BUILDKITE_TOKEN }}

  create-pr:
    needs: [release-build, wait-for-smoke-tests, wait-for-quicktest-core, extract-release-test, extract-smoke-tests, extract-quicktest]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Create release branch and PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TEST_BRANCH: ${{ needs.release-build.outputs.test_branch }}
          RELEASE_VERSION: ${{ github.event.inputs.release_version }}
          MANUAL_CREATED_RELEASE_BRANCH: ${{ needs.release-build.outputs.manual_created_release_branch }}
          SMOKE_TEST_BUILD: ${{ needs.extract-smoke-tests.outputs.build_number }}
          QUICKTEST_BUILD: ${{ needs.extract-quicktest.outputs.build_number }}
          RELEASE_TEST_BUILD: ${{ needs.extract-release-test.outputs.build_number }}
        run: |

          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Create PR with buildkite links
          PR_BODY="Release ${RELEASE_VERSION}

          Buildkite Test Links:
          - [Full Smoke Tests](https://buildkite.com/skypilot-1/full-smoke-tests-run/builds/${SMOKE_TEST_BUILD}) - $([ "${{ needs.wait-for-smoke-tests.outputs.build_status }}" == "success" ] && echo "✅ Success" || echo "❌ Failed")
          - [Quicktest Core](https://buildkite.com/skypilot-1/quicktest-core/builds/${QUICKTEST_BUILD}) - $([ "${{ needs.wait-for-quicktest-core.outputs.build_status }}" == "success" ] && echo "✅ Success" || echo "❌ Failed")
          - [Release Tests](https://buildkite.com/skypilot-1/release/builds/${RELEASE_TEST_BUILD}) - ⏳ (not waiting for completion)

          *Release Tests may take up to 24 hours to complete and might fail due to resource constraints.*"

          echo "Creating PR from ${TEST_BRANCH} to ${MANUAL_CREATED_RELEASE_BRANCH}"

          gh pr create --base ${MANUAL_CREATED_RELEASE_BRANCH} --head ${TEST_BRANCH} \
            --title "Release ${RELEASE_VERSION}" \
            --body "${PR_BODY}"
