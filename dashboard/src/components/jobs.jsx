/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/X5tLGA3WPNU
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */
import React, { useState, useEffect, useRef } from 'react';
import { useRouter } from 'next/router';
import Link from 'next/link';
import {
  CircleIcon,
  FilledCircleIcon,
  SquareIcon,
  TickIcon,
} from '@/components/elements/icons';
import { CircularProgress } from '@mui/material';
import { Button } from '@/components/ui/button';

import { Card } from '@/components/ui/card';
import {
  Table,
  TableHeader,
  TableRow,
  TableHead,
  TableBody,
  TableCell,
} from '@/components/ui/table';
import {
  Select,
  SelectTrigger,
  SelectValue,
  SelectContent,
  SelectItem,
} from '@/components/ui/select';
import { getManagedJobs } from '@/data/connectors/jobs';
import { Layout } from '@/components/elements/layout';
import { EventTable } from '@/components/elements/events';
import { CustomTooltip as Tooltip } from '@/components/utils';
import {
  FileSearchIcon,
  RotateCwIcon,
  MonitorPlay,
  Filter,
  PowerIcon,
} from 'lucide-react';
import { streamClusterJobLogs } from '@/data/connectors/clusters';
import { handleJobAction } from '@/data/connectors/jobs';
import { ConfirmationModal } from '@/components/elements/modals';

// Format duration from seconds to a readable format
export function formatDuration(durationInSeconds) {
  if (!durationInSeconds && durationInSeconds !== 0) return '-';

  // Convert to a whole number if it's a float
  durationInSeconds = Math.floor(durationInSeconds);

  if (durationInSeconds < 60) {
    return `${durationInSeconds}s`;
  }

  const hours = Math.floor(durationInSeconds / 3600);
  const minutes = Math.floor((durationInSeconds % 3600) / 60);
  const seconds = durationInSeconds % 60;

  let result = '';
  if (hours > 0) {
    result += `${hours}h `;
  }
  if (minutes > 0 || hours > 0) {
    result += `${minutes}m `;
  }
  result += `${seconds}s`;

  return result.trim();
}

export function ManagedJobs() {
  const [activeTab, setActiveTab] = useState('active');
  const [loading, setLoading] = useState(false);
  const refreshDataRef = React.useRef(null);
  const [confirmationModal, setConfirmationModal] = useState({
    isOpen: false,
    title: '',
    message: '',
    onConfirm: null,
  });

  const handleRefresh = () => {
    if (refreshDataRef.current) {
      refreshDataRef.current();
    }
  };

  const handleRestartController = () => {
    setConfirmationModal({
      isOpen: true,
      title: 'Restart Controller',
      message: `Are you sure you want to restart the job controller?`,
      onConfirm: async () => {
        try {
          await handleJobAction('restartcontroller', null, null, true);
          // Only refresh after handleJobAction succeeds
          if (refreshDataRef.current) {
            refreshDataRef.current();
          }
        } finally {
          setConfirmationModal({ ...confirmationModal, isOpen: false });
        }
      },
    });
  };

  return (
    <Layout highlighted="jobs">
      <h2 className="text-2xl mb-4">
        <Link href="/jobs" className="text-sky-blue hover:underline">
          Managed Jobs
        </Link>
      </h2>
      <div className="border-b border-gray-200 my-4"></div>
      <div className="flex mb-4">
        <button
          className={`p-2 mx-4 ${activeTab === 'active' ? 'text-sky-blue font-semibold border-b-2 border-sky-blue' : 'text-gray-700'}`}
          onClick={() => setActiveTab('active')}
        >
          Active
        </button>
        <button
          className={`p-2 mx-4 ${activeTab === 'history' ? 'text-sky-blue font-semibold border-b-2 border-sky-blue' : 'text-gray-700'}`}
          onClick={() => setActiveTab('history')}
        >
          History
        </button>
        <div className="ml-auto flex items-center">
          {loading && (
            <div className="flex items-center mr-2">
              <CircularProgress size={15} className="mt-0" />
              <span className="ml-2 text-gray-500">Loading...</span>
            </div>
          )}
          <Button
            variant="ghost"
            size="icon"
            onClick={handleRefresh}
            disabled={loading}
            className="text-sky-blue hover:text-sky-blue-bright mr-2"
            title="Refresh"
          >
            <RotateCwIcon className="h-5 w-5" />
          </Button>
          <Button
            variant="ghost"
            size="icon"
            onClick={handleRestartController}
            disabled={loading}
            className="text-sky-blue hover:text-sky-blue-bright"
            title="Restart Controller"
          >
            <PowerIcon className="h-5 w-5" />
          </Button>
        </div>
      </div>
      <ManagedJobsTable
        activeTab={activeTab}
        refreshInterval={20000}
        setLoading={setLoading}
        refreshDataRef={refreshDataRef}
      />
      <ConfirmationModal
        isOpen={confirmationModal.isOpen}
        onClose={() => setConfirmationModal({ ...confirmationModal, isOpen: false })}
        onConfirm={confirmationModal.onConfirm}
        title={confirmationModal.title}
        message={confirmationModal.message}
      />
    </Layout>
  );
}

export function ManagedJobsTable({
  activeTab,
  refreshInterval,
  setLoading,
  refreshDataRef,
}) {
  const [data, setData] = useState([]);
  const [sortConfig, setSortConfig] = useState({
    key: null,
    direction: 'ascending',
  });
  const [loading, setLocalLoading] = useState(false);
  const [isInitialLoad, setIsInitialLoad] = useState(true);
  const [currentPage, setCurrentPage] = useState(1);
  const [pageSize, setPageSize] = useState(10);
  const [expandedRowId, setExpandedRowId] = useState(null);
  const [statusFilter, setStatusFilter] = useState('all');
  const expandedRowRef = useRef(null);

  // Add click outside handler to collapse expanded row
  useEffect(() => {
    function handleClickOutside(event) {
      // If expanded row exists and click is outside of it
      if (
        expandedRowId &&
        expandedRowRef.current &&
        !expandedRowRef.current.contains(event.target)
      ) {
        setExpandedRowId(null);
      }
    }

    // Add event listener
    document.addEventListener('mousedown', handleClickOutside);

    // Clean up the event listener
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [expandedRowId]);

  const fetchData = React.useCallback(async () => {
    setLoading(true);
    setLocalLoading(true);
    let initialData;
    initialData = await getManagedJobs();
    setData(initialData); // Store raw data without sorting
    setLoading(false); // Stop loading for parent component
    setLocalLoading(false); // Stop loading locally
    setIsInitialLoad(false); // No longer initial load after first data fetch
  }, [setLoading]);

  // Expose fetchData to parent component
  React.useEffect(() => {
    if (refreshDataRef) {
      refreshDataRef.current = fetchData;
    }
  }, [refreshDataRef, fetchData]);

  useEffect(() => {
    setData([]);
    let isCurrent = true;

    fetchData();

    const interval = setInterval(() => {
      if (isCurrent) {
        fetchData();
      }
    }, refreshInterval);

    return () => {
      isCurrent = false;
      clearInterval(interval);
    };
  }, [activeTab, refreshInterval, fetchData]);

  // Sort the data if sortConfig is present
  const sortedData = React.useMemo(() => {
    if (!sortConfig.key) return data;

    return [...data].sort((a, b) => {
      if (a[sortConfig.key] < b[sortConfig.key]) {
        return sortConfig.direction === 'ascending' ? -1 : 1;
      }
      if (a[sortConfig.key] > b[sortConfig.key]) {
        return sortConfig.direction === 'ascending' ? 1 : -1;
      }
      return 0;
    });
  }, [data, sortConfig]);

  // Reset to first page when activeTab changes or when data changes
  useEffect(() => {
    setCurrentPage(1);
  }, [activeTab, data.length]);

  const requestSort = (key) => {
    let direction = 'ascending';
    if (sortConfig.key === key && sortConfig.direction === 'ascending') {
      direction = 'descending';
    }
    setSortConfig({ key, direction });
  };

  const getSortDirection = (key) => {
    if (sortConfig.key === key) {
      return sortConfig.direction === 'ascending' ? ' ↑' : ' ↓';
    }
    return '';
  };

  const filteredData = sortedData
    .filter((item) => {
      if (activeTab === 'active') {
        return [
          'RUNNING',
          'RECOVERING',
          'PENDING',
          'SUBMITTED',
          'STARTING',
          'CANCELLING',
        ].includes(item.status);
      } else {
        return [
          'SUCCEEDED',
          'FAILED',
          'CANCELLED',
          'FAILED_SETUP',
          'FAILED_PRECHECKS',
          'FAILED_NO_RESOURCE',
          'FAILED_CONTROLLER',
        ].includes(item.status);
      }
    })
    .filter((item) => statusFilter === 'all' || item.status === statusFilter);

  // Calculate pagination
  const totalPages = Math.ceil(filteredData.length / pageSize);
  const startIndex = (currentPage - 1) * pageSize;
  const endIndex = startIndex + pageSize;
  const paginatedData = filteredData.slice(startIndex, endIndex);

  // Page navigation handlers
  const goToPreviousPage = () => {
    setCurrentPage((page) => Math.max(page - 1, 1));
  };

  const goToNextPage = () => {
    setCurrentPage((page) => Math.min(page + 1, totalPages));
  };

  const handlePageSizeChange = (e) => {
    const newSize = parseInt(e.target.value, 10);
    setPageSize(newSize);
    setCurrentPage(1); // Reset to first page when changing page size
  };

  return (
    <div>
      <Card>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead
                className="sortable whitespace-nowrap"
                onClick={() => requestSort('id')}
              >
                ID{getSortDirection('id')}
              </TableHead>
              <TableHead
                className="sortable whitespace-nowrap"
                onClick={() => requestSort('name')}
              >
                Name{getSortDirection('name')}
              </TableHead>
              <TableHead
                className="sortable whitespace-nowrap"
                onClick={() => requestSort('total_duration')}
              >
                Total Duration{getSortDirection('total_duration')}
              </TableHead>
              <TableHead
                className="sortable whitespace-nowrap"
                onClick={() => requestSort('job_duration')}
              >
                Job Duration{getSortDirection('job_duration')}
              </TableHead>
              <TableHead>
                <div className="flex items-center gap-2">
                  <span
                    className="sortable whitespace-nowrap"
                    onClick={() => requestSort('status')}
                  >
                    Status{getSortDirection('status')}
                  </span>
                  <Select value={statusFilter} onValueChange={setStatusFilter}>
                    <SelectTrigger className="h-8 w-8 p-0 border-0">
                      <Filter className="w-4 h-4" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All Statuses</SelectItem>
                      {activeTab === 'active' ? (
                        <>
                          <SelectItem value="RUNNING">Running</SelectItem>
                          <SelectItem value="RECOVERING">Recovering</SelectItem>
                          <SelectItem value="PENDING">Pending</SelectItem>
                          <SelectItem value="SUBMITTED">Submitted</SelectItem>
                          <SelectItem value="STARTING">Starting</SelectItem>
                          <SelectItem value="CANCELLING">Cancelling</SelectItem>
                        </>
                      ) : (
                        <>
                          <SelectItem value="SUCCEEDED">Succeeded</SelectItem>
                          <SelectItem value="FAILED">Failed</SelectItem>
                          <SelectItem value="CANCELLED">Cancelled</SelectItem>
                          <SelectItem value="FAILED_SETUP">
                            Failed Setup
                          </SelectItem>
                          <SelectItem value="FAILED_PRECHECKS">
                            Failed Prechecks
                          </SelectItem>
                          <SelectItem value="FAILED_NO_RESOURCE">
                            Failed No Resource
                          </SelectItem>
                          <SelectItem value="FAILED_CONTROLLER">
                            Failed Controller
                          </SelectItem>
                        </>
                      )}
                    </SelectContent>
                  </Select>
                </div>
              </TableHead>
              <TableHead
                className="sortable whitespace-nowrap"
                onClick={() => requestSort('resources')}
              >
                Resources{getSortDirection('resources')}
              </TableHead>
              <TableHead
                className="sortable whitespace-nowrap"
                onClick={() => requestSort('cluster')}
              >
                Cluster{getSortDirection('cluster')}
              </TableHead>
              <TableHead
                className="sortable whitespace-nowrap"
                onClick={() => requestSort('region')}
              >
                Region{getSortDirection('region')}
              </TableHead>
              <TableHead
                className="sortable whitespace-nowrap"
                onClick={() => requestSort('recoveries')}
              >
                Recoveries{getSortDirection('recoveries')}
              </TableHead>
              <TableHead
                className="sortable whitespace-nowrap"
                onClick={() => requestSort('user')}
              >
                User{getSortDirection('user')}
              </TableHead>
              <TableHead>Details</TableHead>
              <TableHead>Actions</TableHead>
            </TableRow>
          </TableHeader>

          <TableBody>
            {loading && isInitialLoad ? (
              <TableRow>
                <TableCell
                  colSpan={11}
                  className="text-center py-6 text-gray-500"
                >
                  <div className="flex justify-center items-center">
                    <CircularProgress size={20} className="mr-2" />
                    <span>Loading...</span>
                  </div>
                </TableCell>
              </TableRow>
            ) : paginatedData.length > 0 ? (
              paginatedData.map((item, index) => (
                <React.Fragment key={index}>
                  <TableRow
                    className={expandedRowId === item.id ? 'selected-row' : ''}
                  >
                    <TableCell>
                      <Link href={`/jobs/${item.id}`} className="text-blue-600">
                        {item.id}
                      </Link>
                    </TableCell>
                    <TableCell>
                      <Link href={`/jobs/${item.id}`} className="text-blue-600">
                        {item.name}
                      </Link>
                    </TableCell>
                    <TableCell>{formatDuration(item.total_duration)}</TableCell>
                    <TableCell>{formatDuration(item.job_duration)}</TableCell>
                    <TableCell>
                      <State2Icon state={item.status} />
                    </TableCell>
                    <TableCell>{item.resources}</TableCell>
                    <TableCell>{item.cluster}</TableCell>
                    <TableCell>{item.region}</TableCell>
                    <TableCell>{item.recoveries}</TableCell>
                    <TableCell>{item.user}</TableCell>
                    <TableCell>
                      {item.details ? (
                        <TruncatedDetails
                          text={item.details}
                          rowId={item.id}
                          expandedRowId={expandedRowId}
                          setExpandedRowId={setExpandedRowId}
                        />
                      ) : (
                        '-'
                      )}
                    </TableCell>
                    <TableCell>
                      <State2Actions
                        jobParent="/jobs"
                        jobId={item.id}
                        jobName={item.name}
                        state={item.status}
                        managed={true}
                        cluster="job controller"
                      />
                    </TableCell>
                  </TableRow>
                  {expandedRowId === item.id && item.details && (
                    <ExpandedDetailsRow
                      text={item.details}
                      colSpan={11}
                      innerRef={expandedRowRef}
                    />
                  )}
                </React.Fragment>
              ))
            ) : (
              <TableRow>
                <TableCell
                  colSpan={11}
                  className="text-center py-6 text-gray-500"
                >
                  No active jobs
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </Card>

      {/* Pagination controls */}
      {filteredData.length > 0 && (
        <div className="flex justify-end items-center py-2 px-4 text-sm text-gray-700">
          <div className="flex items-center space-x-4">
            <div className="flex items-center">
              <span className="mr-2">Rows per page:</span>
              <div className="relative inline-block">
                <select
                  value={pageSize}
                  onChange={handlePageSizeChange}
                  className="py-1 pl-2 pr-6 appearance-none outline-none cursor-pointer border-none bg-transparent"
                  style={{ minWidth: '40px' }}
                >
                  <option value={10}>10</option>
                  <option value={30}>30</option>
                  <option value={50}>50</option>
                  <option value={100}>100</option>
                  <option value={200}>200</option>
                </select>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-4 w-4 text-gray-500 absolute right-0 top-1/2 transform -translate-y-1/2 pointer-events-none"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M19 9l-7 7-7-7"
                  />
                </svg>
              </div>
            </div>
            <div>
              {startIndex + 1} – {Math.min(endIndex, filteredData.length)} of{' '}
              {filteredData.length}
            </div>
            <div className="flex items-center space-x-2">
              <Button
                variant="ghost"
                size="icon"
                onClick={goToPreviousPage}
                disabled={currentPage === 1}
                className="text-gray-500 h-8 w-8 p-0"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  className="chevron-left"
                >
                  <path d="M15 18l-6-6 6-6" />
                </svg>
              </Button>
              <Button
                variant="ghost"
                size="icon"
                onClick={goToNextPage}
                disabled={currentPage === totalPages || totalPages === 0}
                className="text-gray-500 h-8 w-8 p-0"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  className="chevron-right"
                >
                  <path d="M9 18l6-6-6-6" />
                </svg>
              </Button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export function JobDetails({
  clusterName,
  jobData,
  parent,
  parentLink,
  withEvents = true,
  highlighted = 'jobs',
  actionButtons,
  customHeader,
  hideTabs = false,
}) {
  const router = useRouter();
  const [loading, setLoading] = useState(false);
  const [activeTab, setActiveTab] = useState('info'); // Default to 'info' tab

  // Update activeTab when the URL query changes
  useEffect(() => {
    if (router.isReady) {
      const tab = router.query.tab || 'info';
      setActiveTab(tab);
    }
  }, [router.isReady, router.query.tab]);

  // Update URL when tab changes
  const handleTabChange = (tab) => {
    if (tab === activeTab) return; // Don't update if it's the same tab

    setActiveTab(tab);

    // Update URL with the selected tab
    router.push(
      {
        pathname: router.pathname,
        query: { ...router.query, tab },
      },
      undefined,
      { shallow: true }
    );
  };

  return (
    <Layout highlighted={highlighted}>
      {customHeader ? (
        // Render custom header if provided
        <>{customHeader}</>
      ) : (
        // Otherwise render default header
        <>
          <div className="flex items-center">
            <h2 className="text-2xl mb-4">
              {parent}
              <span className="mx-2 text-gray-500">›</span>
              <Link
                href={`${parentLink}/${jobData.id}`}
                className="text-sky-blue hover:underline"
              >
                {jobData.job} (ID: {jobData.id})
              </Link>
            </h2>
            {(!jobData.job || loading) && (
              <>
                <CircularProgress size={15} className="mx-5 mt-7" />
              </>
            )}
          </div>
          <div className="border-b border-gray-200 my-4"></div>
        </>
      )}

      {!hideTabs && (
        <div className="flex justify-between items-center">
          <div className="flex mb-4">
            <button
              className={`p-2 mx-4 ${activeTab === 'info' ? 'text-blue-600 font-semibold border-b-2 border-blue-600' : 'text-gray-700'}`}
              onClick={() => handleTabChange('info')}
            >
              Info
            </button>
            <button
              className={`p-2 mx-4 ${activeTab === 'logs' ? 'text-blue-600 font-semibold border-b-2 border-blue-600' : 'text-gray-700'}`}
              onClick={() => handleTabChange('logs')}
            >
              Logs
            </button>
            {withEvents && (
              <button
                className={`p-2 mx-4 ${activeTab === 'event' ? 'text-blue-600 font-semibold border-b-2 border-blue-600' : 'text-gray-700'}`}
                onClick={() => handleTabChange('event')}
              >
                Events
              </button>
            )}
          </div>
          {/* Only show action buttons in default header mode */}
          {!customHeader && (
            <div>
              {actionButtons || (
                <State2Actions
                  jobParent={parentLink}
                  jobId={jobData.id}
                  jobName={jobData.job}
                  state={jobData.state || jobData.status || 'UNKNOWN'}
                  managed={false}
                  cluster={clusterName}
                />
              )}
            </div>
          )}
        </div>
      )}

      <ActiveTab
        clusterName={clusterName}
        jobData={jobData}
        activeTab={activeTab}
        setLoading={setLoading}
      />
    </Layout>
  );
}

export function formatLogs(str) {
  if (!str) return '';

  // First remove ANSI escape codes
  let result = stripAnsiCodes(str);

  // Remove all HTML-like tags while preserving their content
  // This handles both paired tags like <tag>content</tag> and standalone tags like <tag>
  result = result.replace(/<[^>]*>(.*?)<\/[^>]*>/g, '$1'); // Remove paired tags but keep content
  result = result.replace(/<[^>]*>/g, ''); // Remove any remaining standalone tags

  // Remove formatting markers like [dim] and [/dim]
  result = result.replace(/\[([^\]]+)\]/g, ''); // This will remove any text in square brackets

  return result;
}

export function stripAnsiCodes(str) {
  return str.replace(/\x1b\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGKH]/g, '');
}

function extractNodeTypes(logs) {
  const nodePattern = /\((head|worker\d+),/g; // Matches 'head' or 'worker' followed by any number
  const nodeTypes = new Set();

  let match;
  while ((match = nodePattern.exec(logs)) !== null) {
    nodeTypes.add(match[1]); // Add the node type to the set
  }

  const sortedNodeTypes = Array.from(nodeTypes).sort((a, b) => {
    if (a === 'head') return -1;
    if (b === 'head') return 1;
    return a.localeCompare(b, undefined, {
      numeric: true,
      sensitivity: 'base',
    });
  });

  return sortedNodeTypes; // Return sorted array
}

export function LogFilter({ logs }) {
  const [selectedNode, setSelectedNode] = useState('all');
  const [filteredLogs, setFilteredLogs] = useState(logs);
  const [nodeTypes, setNodeTypes] = useState([]);

  useEffect(() => {
    setNodeTypes(extractNodeTypes(logs));
  }, [logs]);

  useEffect(() => {
    if (selectedNode === 'all') {
      setFilteredLogs(logs);
    } else {
      const filtered = logs
        .split('\n')
        .filter((line) => line.includes(`(${selectedNode},`));
      setFilteredLogs(filtered.join('\n'));
    }
  }, [selectedNode, logs]);

  return (
    <div>
      <Select
        onValueChange={(value) => setSelectedNode(value)}
        value={selectedNode}
      >
        <SelectTrigger aria-label="Node">
          <SelectValue placeholder="Select Node" />
        </SelectTrigger>
        <SelectContent>
          <SelectItem value="all">All Nodes</SelectItem>
          {nodeTypes.map((node) => (
            <SelectItem key={node} value={node}>
              {node}
            </SelectItem>
          ))}
        </SelectContent>
      </Select>
      <br />
      <pre style={{ whiteSpace: 'pre-wrap', wordBreak: 'break-word' }}>
        {filteredLogs}
      </pre>
    </div>
  );
}
export const contentStyle = {
  height: '80%',
  overflowY: 'scroll',
  padding: '30px',
  backgroundColor: '#f7f7f7',
};

function ActiveTab({ clusterName, jobData, activeTab, setLoading }) {
  const [logs, setLogs] = useState([]);
  const router = useRouter();
  const isClusterJobPage = router.pathname.includes(
    '/clusters/[cluster]/[job]'
  ); // Check if we're on the clusters job page

  // Clear logs when activeTab changes or when jobData.id changes
  useEffect(() => {
    setLogs([]);
  }, [activeTab, jobData.id]);

  // Only fetch logs when actually viewing the logs tab
  useEffect(() => {
    let active = true;

    if (activeTab === 'logs' && clusterName && jobData.id) {
      setLoading(true);

      streamClusterJobLogs({
        clusterName: clusterName,
        jobId: jobData.id,
        onNewLog: (log) => {
          if (active) {
            const strippedLog = formatLogs(log);
            setLogs((prevLogs) => [...prevLogs, strippedLog]);
          }
        },
      })
        .then(() => {
          if (active) {
            setLoading(false);
          }
        })
        .catch((error) => {
          if (active) {
            console.error('Error streaming logs:', error);
            setLoading(false);
          }
        });
    } else if (activeTab !== 'logs') {
      setLoading(false);
    }

    return () => {
      active = false;
    };
  }, [activeTab, clusterName, jobData.id, setLoading]);

  // For clusters job page with hidden tabs, we want to show different content based on the URL tab parameter
  if (isClusterJobPage) {
    if (activeTab === 'logs') {
      return (
        <div className="items-center mb-6">
          <Card style={contentStyle}>
            <LogFilter logs={logs.join('')} />
          </Card>
        </div>
      );
    }

    // Default to info tab for hidden tabs
    return (
      <div className="items-center mb-6">
        <Card className="p-3">
          <div className="grid grid-cols-2 gap-2 text-sm">
            <div className="flex items-center">
              <span className="font-medium text-gray-600 mr-2">Job ID:</span>
              <span>{jobData.id}</span>
            </div>
            <div className="flex items-center">
              <span className="font-medium text-gray-600 mr-2">User:</span>
              <span>{jobData.user}</span>
            </div>
            <div className="flex items-center">
              <span className="font-medium text-gray-600 mr-2">Status:</span>
              <span>{jobData.state}</span>
            </div>
            {jobData.resources && (
              <div className="flex items-center">
                <span className="font-medium text-gray-600 mr-2">
                  Resources:
                </span>
                <span>{jobData.resources || 'N/A'}</span>
              </div>
            )}
            <div className="flex items-center">
              <span className="font-medium text-gray-600 mr-2">Job Name:</span>
              <span>{jobData.job}</span>
            </div>
            {jobData.cluster && (
              <div className="flex items-center">
                <span className="font-medium text-gray-600 mr-2">Cluster:</span>
                <Link
                  href={`/clusters/${jobData.cluster}`}
                  className="text-blue-600 hover:underline"
                >
                  {jobData.cluster}
                </Link>
              </div>
            )}
            {jobData.infra && (
              <div className="flex items-center">
                <span className="font-medium text-gray-600 mr-2">Infra:</span>
                <span>{jobData.infra}</span>
              </div>
            )}
          </div>
        </Card>
      </div>
    );
  }

  switch (activeTab) {
    case 'info':
      return (
        <div className="items-center mb-6">
          <Card className="p-3">
            <div className="grid grid-cols-2 gap-2 text-sm">
              <div className="flex items-center">
                <span className="font-medium text-gray-600 mr-2">Job ID:</span>
                <span>{jobData.id}</span>
              </div>
              <div className="flex items-center">
                <span className="font-medium text-gray-600 mr-2">User:</span>
                <span>{jobData.user}</span>
              </div>
              <div className="flex items-center">
                <span className="font-medium text-gray-600 mr-2">Status:</span>
                <span>{jobData.state}</span>
              </div>
              {jobData.resources && (
                <div className="flex items-center">
                  <span className="font-medium text-gray-600 mr-2">
                    Resources:
                  </span>
                  <span>{jobData.resources || 'N/A'}</span>
                </div>
              )}
              <div className="flex items-center">
                <span className="font-medium text-gray-600 mr-2">
                  Job Name:
                </span>
                <span>{jobData.job}</span>
              </div>
              {jobData.cluster && (
                <div className="flex items-center">
                  <span className="font-medium text-gray-600 mr-2">
                    Cluster:
                  </span>
                  <Link
                    href={`/clusters/${jobData.cluster}`}
                    className="text-sky-blue hover:underline"
                  >
                    {jobData.cluster}
                  </Link>
                </div>
              )}
              {jobData.infra && (
                <div className="flex items-center">
                  <span className="font-medium text-gray-600 mr-2">Infra:</span>
                  <span>{jobData.infra}</span>
                </div>
              )}
            </div>
          </Card>
        </div>
      );
    case 'logs':
      return (
        <Card style={contentStyle}>
          <LogFilter logs={logs.join('')} />
        </Card>
      );
    case 'event':
      return <EventTable events={jobData.events} />;
    default:
      return <></>;
  }
}

function state2Icon(state) {
  const badgeClasses =
    'inline-flex items-center px-2 py-1 rounded-full text-xs font-medium';
  switch (state) {
    case 'RUNNING':
      return (
        <span className={`${badgeClasses} bg-green-50 text-green-700`}>
          <FilledCircleIcon className="w-2 h-2 mr-2" />
          Running
        </span>
      );
    case 'PENDING':
      return (
        <span className={`${badgeClasses} bg-yellow-50 text-yellow-700`}>
          <CircleIcon className="w-2 h-2 mr-2" />
          Pending
        </span>
      );
    case 'SUCCEEDED':
      return (
        <span className={`${badgeClasses} bg-blue-50 text-blue-700`}>
          <TickIcon className="w-2 h-2 mr-2" />
          Succeeded
        </span>
      );
    case 'FAILED':
      return (
        <span className={`${badgeClasses} bg-red-50 text-red-700`}>
          <SquareIcon className="w-2 h-2 mr-2" />
          Failed
        </span>
      );
    case 'CANCELED':
      return (
        <span className={`${badgeClasses} bg-gray-50 text-gray-700`}>
          <SquareIcon className="w-2 h-2 mr-2" />
          Canceled
        </span>
      );
    case 'RECOVERING':
      return (
        <span className={`${badgeClasses} bg-orange-50 text-orange-700`}>
          <CircleIcon className="w-2 h-2 mr-2" />
          Recovering
        </span>
      );
    case 'SUBMITTED':
      return (
        <span className={`${badgeClasses} bg-indigo-50 text-indigo-700`}>
          <CircleIcon className="w-2 h-2 mr-2" />
          Submitted
        </span>
      );
    case 'STARTING':
      return (
        <span className={`${badgeClasses} bg-cyan-50 text-cyan-700`}>
          <CircleIcon className="w-2 h-2 mr-2" />
          Starting
        </span>
      );
    case 'CANCELLING':
      return (
        <span className={`${badgeClasses} bg-rose-50 text-rose-700`}>
          <CircleIcon className="w-2 h-2 mr-2" />
          Cancelling
        </span>
      );
    case 'FAILED_SETUP':
      return (
        <span className={`${badgeClasses} bg-pink-50 text-pink-700`}>
          <CircleIcon className="w-2 h-2 mr-2" />
          Failed Setup
        </span>
      );
    case 'FAILED_PRECHECKS':
      return (
        <span className={`${badgeClasses} bg-red-50 text-red-700`}>
          <CircleIcon className="w-2 h-2 mr-2" />
          Failed Prechecks
        </span>
      );
    case 'FAILED_NO_RESOURCE':
      return (
        <span className={`${badgeClasses} bg-red-50 text-red-700`}>
          <CircleIcon className="w-2 h-2 mr-2" />
          Failed No Resource
        </span>
      );
    case 'FAILED_CONTROLLER':
      return (
        <span className={`${badgeClasses} bg-red-50 text-red-700`}>
          <CircleIcon className="w-2 h-2 mr-2" />
          Failed Controller
        </span>
      );
    default:
      return (
        <span className={`${badgeClasses} bg-gray-100 text-gray-800`}>
          <FilledCircleIcon className="w-3 h-3 mr-1" />
          {state}
        </span>
      );
  }
}

export function State2Icon({ state }) {
  return (
    <Tooltip content={state} className="text-muted-foreground text-sm">
      <span>{state2Icon(state)}</span>
    </Tooltip>
  );
}

export function State2Actions({
  withLabel = false,
  jobParent,
  jobId,
  jobName,
  state,
  managed,
  cluster,
}) {
  const router = useRouter();
  const actions = ['logs'];
  if (['RUNNING', 'PENDING'].includes(state)) {
    actions.push('cancel');
  }
  if (managed) {
    actions.push('controllerlogs');
  }

  const [confirmationModal, setConfirmationModal] = useState({
    isOpen: false,
    title: '',
    message: '',
    onConfirm: null,
  });

  const handleLogsClick = (e, logType) => {
    e.preventDefault();
  
    // Use Next.js router for navigation if on the same page, otherwise direct URL
    const targetPath = `${jobParent}/${jobId}`;
  
    if (router.pathname.includes(targetPath)) {
      // If we're already on the job page, just change the tab parameter
      router.push(
        {
          pathname: router.pathname,
          query: { ...router.query, tab: logType },
        },
        undefined,
        { shallow: true }
      );
    } else {
      // If we're navigating to a different page, use the full URL
      router.push(`${targetPath}?tab=${logType}`);
    }
  };

  const handleCancelClick = () => {
    setConfirmationModal({
      isOpen: true,
      title: 'Cancel Job',
      message: `Are you sure you want to cancel job "${jobName}" (${jobId})?`,
      onConfirm: () => {
        handleJobAction('cancel', jobId, cluster, managed);
        setConfirmationModal({ ...confirmationModal, isOpen: false });
      },
    });
  };

  return (
    <>
      <span className="flex content-center items-center">
        <Tooltip
          key="logs"
          content="View Job Logs"
          className="capitalize text-sm text-muted-foreground"
        >
          <button
            onClick={(e) => handleLogsClick(e, 'logs')}
            className="text-sky-blue hover:text-sky-blue-bright font-medium mx-2 flex items-center"
          >
            <FileSearchIcon className="w-4 h-4 text-gray-500 inline-block" />
            {withLabel && 'Logs'}
          </button>
        </Tooltip>
        {managed && (
          <Tooltip
            key="controllerlogs"
            content="View Controller Logs"
            className="capitalize text-sm text-muted-foreground"
          >
            <button
              onClick={(e) => handleLogsClick(e, 'controllerlogs')}
              className="text-sky-blue hover:text-sky-blue-bright font-medium mx-2 flex items-center"
            >
              <MonitorPlay className="w-4 h-4 text-gray-500 inline-block" />
              {withLabel && 'Controller Logs'}
            </button>
          </Tooltip>
        )}
        <Tooltip
          key="cancel"
          content="Cancel Job"
          className="capitalize ml-2 text-sm text-muted-foreground"
        >
          {actions.includes('cancel') ? (
            <button
              onClick={handleCancelClick}
              className="text-sky-blue hover:text-sky-blue-bright font-medium mx-2 flex items-center"
            >
              <SquareIcon className="w-4 h-4 text-gray-500 inline-block" />
              {withLabel && 'Cancel'}
            </button>
          ) : (
            <span className="opacity-20 ml-2" title="Cancel">
              <SquareIcon className="w-4 h-4 text-gray-500 inline-block" />
              {withLabel && 'Cancel'}
            </span>
          )}
        </Tooltip>
      </span>

      <ConfirmationModal
        isOpen={confirmationModal.isOpen}
        onClose={() => {
          setConfirmationModal({ ...confirmationModal, isOpen: false });
        }}
        onConfirm={() => {
          confirmationModal.onConfirm();
          setConfirmationModal({ ...confirmationModal, isOpen: false });
        }}
        title={confirmationModal.title}
        message={confirmationModal.message}
      />
    </>
  );
}

export function ClusterJobs({ clusterName, clusterJobData }) {
  const [expandedRowId, setExpandedRowId] = useState(null);
  const [sortConfig, setSortConfig] = useState({
    key: null,
    direction: 'ascending',
  });
  const [currentPage, setCurrentPage] = useState(1);
  const [pageSize, setPageSize] = useState(10);
  const expandedRowRef = useRef(null);
  const [loading, setLoading] = useState(true);
  const [isInitialLoad, setIsInitialLoad] = useState(true); // Track if it's the initial load
  const [prevClusterJobData, setPrevClusterJobData] = useState(null); // Track previous data

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (
        expandedRowId &&
        expandedRowRef.current &&
        !expandedRowRef.current.contains(event.target)
      ) {
        setExpandedRowId(null);
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [expandedRowId]);

  // Filter out terminated jobs if on active tab
  const jobData = React.useMemo(() => {
    return clusterJobData || [];
  }, [clusterJobData]);

  useEffect(() => {
    // Check if the data has changed significantly (new data received)
    if (JSON.stringify(clusterJobData) !== JSON.stringify(prevClusterJobData)) {
      setLoading(true);
      setPrevClusterJobData(clusterJobData);
    }

    // Set loading to false when job data is available
    if (jobData.length > 0) {
      setIsInitialLoad(false); // No longer initial load after first data fetch with content
    }
    setLoading(false);
  }, [clusterJobData, jobData.length, prevClusterJobData]);

  // Sort the data if sortConfig is present
  const sortedData = React.useMemo(() => {
    if (!sortConfig.key) return jobData;

    return [...jobData].sort((a, b) => {
      if (a[sortConfig.key] < b[sortConfig.key]) {
        return sortConfig.direction === 'ascending' ? -1 : 1;
      }
      if (a[sortConfig.key] > b[sortConfig.key]) {
        return sortConfig.direction === 'ascending' ? 1 : -1;
      }
      return 0;
    });
  }, [jobData, sortConfig]);

  const requestSort = (key) => {
    let direction = 'ascending';
    if (sortConfig.key === key && sortConfig.direction === 'ascending') {
      direction = 'descending';
    }
    setSortConfig({ key, direction });
  };

  const getSortDirection = (key) => {
    if (sortConfig.key === key) {
      return sortConfig.direction === 'ascending' ? ' ↑' : ' ↓';
    }
    return '';
  };

  // Calculate pagination
  const totalPages = Math.ceil(sortedData.length / pageSize);
  const startIndex = (currentPage - 1) * pageSize;
  const endIndex = startIndex + pageSize;
  const paginatedData = sortedData.slice(startIndex, endIndex);

  // Page navigation handlers
  const goToPreviousPage = () => {
    setCurrentPage((page) => Math.max(page - 1, 1));
  };

  const goToNextPage = () => {
    setCurrentPage((page) => Math.min(page + 1, totalPages));
  };

  const handlePageSizeChange = (e) => {
    const newSize = parseInt(e.target.value, 10);
    setPageSize(newSize);
    setCurrentPage(1); // Reset to first page when changing page size
  };

  return (
    <div className="relative">
      <Card>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead
                className="sortable whitespace-nowrap"
                onClick={() => requestSort('id')}
              >
                ID{getSortDirection('id')}
              </TableHead>
              <TableHead
                className="sortable whitespace-nowrap"
                onClick={() => requestSort('job')}
              >
                Name{getSortDirection('job')}
              </TableHead>
              <TableHead
                className="sortable whitespace-nowrap"
                onClick={() => requestSort('total_duration')}
              >
                Total Duration{getSortDirection('total_duration')}
              </TableHead>
              <TableHead
                className="sortable whitespace-nowrap"
                onClick={() => requestSort('job_duration')}
              >
                Job Duration{getSortDirection('job_duration')}
              </TableHead>
              <TableHead
                className="sortable whitespace-nowrap"
                onClick={() => requestSort('state')}
              >
                Status{getSortDirection('state')}
              </TableHead>
              <TableHead
                className="sortable whitespace-nowrap"
                onClick={() => requestSort('resources')}
              >
                Resources{getSortDirection('resources')}
              </TableHead>
              <TableHead
                className="sortable whitespace-nowrap"
                onClick={() => requestSort('user')}
              >
                User{getSortDirection('user')}
              </TableHead>
              <TableHead>Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {loading && isInitialLoad ? (
              <TableRow>
                <TableCell
                  colSpan={7}
                  className="text-center py-6 text-gray-500"
                >
                  <div className="flex justify-center items-center">
                    <CircularProgress size={20} className="mr-2" />
                    <span>Loading...</span>
                  </div>
                </TableCell>
              </TableRow>
            ) : paginatedData.length > 0 ? (
              paginatedData.map((item) => (
                <React.Fragment key={item.id}>
                  <TableRow
                    className={expandedRowId === item.id ? 'selected-row' : ''}
                  >
                    <TableCell>
                      <Link
                        href={`/clusters/${clusterName}/${item.id}`}
                        className="text-blue-600"
                      >
                        {item.id}
                      </Link>
                    </TableCell>
                    <TableCell>
                      <Link
                        href={`/clusters/${clusterName}/${item.id}`}
                        className="text-blue-600"
                      >
                        <TruncatedDetails
                          text={item.job || 'Unnamed job'}
                          rowId={item.id}
                          expandedRowId={expandedRowId}
                          setExpandedRowId={setExpandedRowId}
                        />
                      </Link>
                    </TableCell>
                    <TableCell>{formatDuration(item.total_duration)}</TableCell>
                    <TableCell>{formatDuration(item.job_duration)}</TableCell>
                    <TableCell>
                      <State2Icon state={item.state} />
                    </TableCell>
                    <TableCell>{item.resources}</TableCell>
                    <TableCell>{item.user}</TableCell>
                    <TableCell className="flex content-center items-center">
                      <State2Actions
                        jobParent={`/clusters/${clusterName}`}
                        jobId={item.id}
                        jobName={item.job}
                        state={item.state}
                        managed={false}
                        cluster={clusterName}
                      />
                    </TableCell>
                  </TableRow>
                  {expandedRowId === item.id && (
                    <ExpandedDetailsRow
                      text={item.job || 'Unnamed job'}
                      colSpan={7}
                      innerRef={expandedRowRef}
                    />
                  )}
                </React.Fragment>
              ))
            ) : (
              <TableRow>
                <TableCell
                  colSpan={7}
                  className="text-center py-6 text-gray-500"
                >
                  No jobs found
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </Card>

      {/* Show small loading indicator in corner when not initial load */}
      {loading && !isInitialLoad && paginatedData.length > 0 && (
        <div className="fixed bottom-4 right-4 bg-white rounded-full shadow-lg p-3 z-50">
          <CircularProgress size={24} />
        </div>
      )}

      {sortedData.length > 0 && (
        <div className="flex justify-end items-center py-2 px-4 text-sm text-gray-700">
          <div className="flex items-center space-x-4">
            <div className="flex items-center">
              <span className="mr-2">Rows per page:</span>
              <div className="relative inline-block">
                <select
                  value={pageSize}
                  onChange={handlePageSizeChange}
                  className="py-1 pl-2 pr-6 appearance-none outline-none cursor-pointer border-none bg-transparent"
                  style={{ minWidth: '40px' }}
                >
                  <option value={5}>5</option>
                  <option value={10}>10</option>
                  <option value={20}>20</option>
                  <option value={50}>50</option>
                </select>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-4 w-4 text-gray-500 absolute right-0 top-1/2 transform -translate-y-1/2 pointer-events-none"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M19 9l-7 7-7-7"
                  />
                </svg>
              </div>
            </div>
            <div>
              {startIndex + 1} – {Math.min(endIndex, sortedData.length)} of{' '}
              {sortedData.length}
            </div>
            <div className="flex items-center space-x-2">
              <Button
                variant="ghost"
                size="icon"
                onClick={goToPreviousPage}
                disabled={currentPage === 1}
                className="text-gray-500 h-8 w-8 p-0"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  className="chevron-left"
                >
                  <path d="M15 18l-6-6 6-6" />
                </svg>
              </Button>
              <Button
                variant="ghost"
                size="icon"
                onClick={goToNextPage}
                disabled={currentPage === totalPages || totalPages === 0}
                className="text-gray-500 h-8 w-8 p-0"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  className="chevron-right"
                >
                  <path d="M9 18l6-6-6-6" />
                </svg>
              </Button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

function ExpandedDetailsRow({ text, colSpan, innerRef }) {
  return (
    <TableRow className="expanded-details">
      <TableCell colSpan={colSpan}>
        <div
          className="p-4 bg-gray-50 rounded-md border border-gray-200"
          ref={innerRef}
        >
          <p className="text-sm font-medium text-gray-900">Full Details</p>
          <p
            className="mt-1 text-sm text-gray-700"
            style={{ whiteSpace: 'pre-wrap' }}
          >
            {text}
          </p>
        </div>
      </TableCell>
    </TableRow>
  );
}

function TruncatedDetails({ text, rowId, expandedRowId, setExpandedRowId }) {
  const isTruncated = text.length > 50;
  const displayText = isTruncated ? `${text.substring(0, 50)}` : text;

  const handleClick = (e) => {
    e.stopPropagation();
    if (isTruncated) {
      setExpandedRowId(expandedRowId === rowId ? null : rowId);
    }
  };

  return (
    <div
      className="truncated-details relative truncate max-w-full"
      onClick={handleClick}
    >
      <span className={`${isTruncated ? 'cursor-pointer' : ''}`}>
        {displayText}
        {isTruncated && (
          <span className="text-blue-600 hover:text-blue-800 font-medium ml-1 whitespace-nowrap">
            ... show more
          </span>
        )}
      </span>
    </div>
  );
}
