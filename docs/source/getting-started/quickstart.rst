Quickstart
==========

Sky is a tool to run any workload seamlessly across different cloud providers
through a unified interface. No knowledge of cloud offerings is required or
expected &mdash; you simply define the workload and its resource requirements,
and Sky will automatically execute it on AWS, Google Cloud Platform or Microsoft
Azure.

Please follow the installation instructions before continuing with this guide.

Key Features
------------
- **Run your code on the cloud with zero code changes**
- **Easy provisionioning of VMs** across multiple cloud platforms (AWS, Azure or GCP)
- **Fast and iterative development** with quick access to cloud instances for prototyping. If cloud is unavailable, a local development mode is also available
- **Store your datasets on the cloud** and access them like you would on a local filesystem
- **No cloud lock-in** - easily move your code from Azure GPUs to Google TPUs with one line change


Hello, Sky!
-----------
We'll start by launching our first cluster on Sky by defining a task.

We can specify the following task attributes with a YAML file:

- :code:`resources` (optional): what cloud resources the task must be run on (e.g. accelerators, instance type, etc.)
- :code:`setup` (optional): commands that must be run before the task is executed
- :code:`run`: specifies the commands that must be run as the actual ask

Below is a task YAML that prints "hello sky!" and pings localhost 5 times,
requiring an NVIDIA Tesla K80 GPU on AWS.

.. code-block:: yaml

   # hello_sky.yaml

   resources:
      cloud: aws
      accelerators: K80

   setup: |
      echo "running setup"

   run: |
      echo "hello sky!"
      ping localhost -c 5

Sky handles selecting an appropriate cluster size based on user-specified
resource constraints, launching the cluster on an appropriate cloud provider, and executing the task.

To launch a task based on our above YAML spec, we can use sky launch.

.. code-block:: console

   $ sky launch -c mycluster hello_sky.yaml

The :code:`-c` option allows us to specify a cluster name. If a cluster with the
same name already exists, Sky will reuse that cluster If no such cluster exists,
a new cluster with that name will be provisioned. If no cluster name is provided,
(e.g. :code:`sky launch hello_sky.yaml`), then a cluster name will be autogenerated.

We can view our existing clusters by running:

.. code-block:: console

   $ sky status

If you would like to log into the your cluster, Sky provides access with SSH:

.. code-block:: console

   $ ssh mycluster

Sky is much more than a tool for provisioning and managing clusters easily.
It also comes with a features for storing and moving data, queueing multiple jobs,
iterative development, and interactive nodes for debugging.