Quickstart
==========

Sky is a tool to run any workload seamlessly across different cloud providers
through a unified interface. No knowledge of cloud offerings is required or
expected -- you simply define the workload and its resource requirements,
and Sky will automatically execute it on AWS, Google Cloud Platform or Microsoft
Azure.

Please follow the installation instructions before continuing with this guide.

Key Features
------------
- **Run your code on the cloud with zero code changes**
- **Easy provisionioning of VMs** across multiple cloud platforms (AWS, Azure or GCP)
- **Easy management of multiple clusters** to handle different projects
- **Fast and iterative development** with quick access to cloud instances for prototyping
- **Store your datasets on the cloud** and access them like you would on a local filesystem
- **No cloud lock-in** - transparently run your code across AWS, Google Cloud, and Azure


Hello, Sky!
-----------
We'll start by launching our first cluster on Sky by defining a task.

We can specify the following task attributes with a YAML file:

- :code:`resources` (optional): what cloud resources the task must be run on (e.g., accelerators, instance type, etc.)
- :code:`setup` (optional): commands that must be run before the task is executed
- :code:`run` (optional): specifies the commands that must be run as the actual ask

Below is a task YAML that prints "hello sky!" and shows installed Conda environments,
requiring an NVIDIA Tesla K80 GPU on AWS. (More example yaml files can be found in `examples <https://github.com/concretevitamin/sky-experiments/tree/master/examples>`_)

.. code-block:: yaml

   # hello_sky.yaml

   resources:
     # Optional; if left out, pick from the available clouds.
     cloud: aws

     # Get 1 K80 GPU.  Use <name>:<n> to get more (e.g., "K80:8").
     accelerators: K80

   setup: |
     # Typical use: pip install -r requirements.txt
     echo "running setup"

   run: |
     # Typical use: make use of resources, such as running training.
     echo "hello sky!"
     conda env list

Sky handles selecting an appropriate VM based on user-specified resource
constraints, launching the cluster on an appropriate cloud provider, and
executing the task.

To launch a task based on our above YAML spec, we can use :code:`sky launch`.

.. code-block:: console

   $ sky launch -c mycluster hello_sky.yaml

The :code:`-c` option allows us to specify a cluster name. If a cluster with the
same name already exists, Sky will reuse that cluster. If no such cluster
exists, a new cluster with that name will be provisioned. If no cluster name is
provided, (e.g., :code:`sky launch hello_sky.yaml`), a cluster name will be
autogenerated.

We can view our existing clusters by running :code:`sky status`:

.. code-block:: console

   $ sky status

This may show multiple clusters, if you have created several:

.. code-block::

  NAME       LAUNCHED     RESOURCES             COMMAND                                 STATUS
  gcp        1 day ago    1x GCP(n1-highmem-8)  sky cpunode -c gcp --cloud gcp          STOPPED
  mycluster  12 mins ago  1x AWS(p2.xlarge)     sky launch -c mycluster hello_sky.yaml  UP

If you would like to log into the a cluster, Sky provides convenient SSH access via :code:`ssh <cluster_name>`:

.. code-block:: console

   $ ssh mycluster

Sky is more than a tool for easily provisioning and managing multiple clusters
on different clouds.  It also comes with features for storing and moving data,
queueing multiple jobs, iterative development, and interactive nodes for
debugging.
