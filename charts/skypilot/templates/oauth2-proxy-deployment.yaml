{{- if or .Values.auth.oauth.enabled (and .Values.ingress.enabled (index .Values.ingress "oauth2-proxy" "enabled")) }}
{{- $oauth2 := .Values.auth.oauth -}}
{{- if not .Values.auth.oauth.enabled -}}
{{- $oauth2 = index .Values.ingress "oauth2-proxy" -}}
{{- end -}}
{{- if not (index $oauth2 "oidc-issuer-url") -}}
{{- fail "ingress.oauth2-proxy.oidc-issuer-url is required when OAuth2 proxy is enabled" -}}
{{- end -}}
{{- if and (not (index $oauth2 "client-details-from-secret")) (eq (index $oauth2 "client-id") "") -}}
{{- fail "ingress.oauth2-proxy.client-id is required when OAuth2 proxy is enabled and client-details-from-secret is not set" -}}
{{- end -}}
{{- if and (not (index $oauth2 "client-details-from-secret")) (eq (index $oauth2 "client-secret") "") -}}
{{- fail "ingress.oauth2-proxy.client-secret is required when OAuth2 proxy is enabled and client-details-from-secret is not set" -}}
{{- end -}}
{{- if and (index $oauth2 "redis-url") (index $oauth2 "redis-secret") -}}
{{- fail "redis-url and redis-secret are mutually exclusive when OAuth2 proxy is enabled" -}}
{{- end -}}

{{- /* Determine the secret key format when using client-details-from-secret */ -}}
{{- $clientIdKey := "client-id" -}}
{{- $clientSecretKey := "client-secret" -}}
{{- if (index $oauth2 "client-details-from-secret") -}}
  {{- $secretName := index $oauth2 "client-details-from-secret" -}}
  {{- $secret := lookup "v1" "Secret" .Release.Namespace $secretName -}}
  {{- if $secret -}}
    {{- if and (not (hasKey $secret.data "client-id")) (hasKey $secret.data "client_id") -}}
      {{- $clientIdKey = "client_id" -}}
    {{- end -}}
    {{- if and (not (hasKey $secret.data "client-secret")) (hasKey $secret.data "client_secret") -}}
      {{- $clientSecretKey = "client_secret" -}}
    {{- end -}}
    {{- /* Validate that at least one format exists for each credential */ -}}
    {{- if not (or (hasKey $secret.data "client-id") (hasKey $secret.data "client_id")) -}}
      {{- fail (printf "Secret %s must contain either 'client-id' or 'client_id' key" $secretName) -}}
    {{- end -}}
    {{- if not (or (hasKey $secret.data "client-secret") (hasKey $secret.data "client_secret")) -}}
      {{- fail (printf "Secret %s must contain either 'client-secret' or 'client_secret' key" $secretName) -}}
    {{- end -}}
  {{- end -}}
{{- end -}}

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ .Release.Name }}-oauth2-proxy
    skypilot.co/component: oauth2-proxy
  name: {{ .Release.Name }}-oauth2-proxy
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}-oauth2-proxy
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-oauth2-proxy
        skypilot.co/component: oauth2-proxy
    spec:
      containers:
      - name: oauth2-proxy
        image: {{ index $oauth2 "image" | default "quay.io/oauth2-proxy/oauth2-proxy:v7.9.0" }}
        imagePullPolicy: IfNotPresent
        args:
        - --provider=oidc
        - --oidc-issuer-url={{ index $oauth2 "oidc-issuer-url" }}
        - --email-domain={{ index $oauth2 "email-domain" | default "*" }}
        - --upstream=file:///dev/null
        - --http-address=0.0.0.0:4180
        - --skip-provider-button=true
        - --reverse-proxy=true
        - --set-xauthrequest
        - --session-store-type={{ index $oauth2 "session-store-type" | default "redis" }}
        {{- if not (index $oauth2 "use-https" | default false) }}
        - --cookie-secure=false
        {{- end }}
        {{- if (index $oauth2 "cookie-refresh") }}
        - --cookie-refresh={{ index $oauth2 "cookie-refresh" }}
        {{- end }}
        {{- if (index $oauth2 "cookie-expire") }}
        - --cookie-expire={{ index $oauth2 "cookie-expire" }}
        {{- end }}
        {{- if eq (index $oauth2 "session-store-type" | default "redis") "redis" }}
        {{- if (index $oauth2 "redis-url") }}
        - --redis-connection-url={{ index $oauth2 "redis-url" }}
        {{- else if (index $oauth2 "redis-secret") }}
        - --redis-connection-url=$(REDIS_URL)
        {{- else }}
        - --redis-connection-url=redis://$(SERVICE_NAME)-oauth2-proxy-redis:6379/0
        {{- end }}
        {{- end }}
        env:
        - name: OAUTH2_PROXY_CLIENT_ID
          {{- if (index $oauth2 "client-details-from-secret") }}
          valueFrom:
            secretKeyRef:
              name: {{ index $oauth2 "client-details-from-secret" }}
              key: {{ $clientIdKey }}
          {{- else }}
          value: {{ index $oauth2 "client-id" | quote }}
          {{- end }}
        - name: OAUTH2_PROXY_CLIENT_SECRET
          {{- if (index $oauth2 "client-details-from-secret") }}
          valueFrom:
            secretKeyRef:
              name: {{ index $oauth2 "client-details-from-secret" }}
              key: {{ $clientSecretKey }}
          {{- else }}
          value: {{ index $oauth2 "client-secret" | quote }}
          {{- end }}
        - name: SERVICE_NAME
          value: {{ .Release.Name }}
        {{- if (index $oauth2 "redis-secret") }}
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: {{ index $oauth2 "redis-secret" }}
              key: redis_url
        {{- end }}
        - name: OAUTH2_PROXY_COOKIE_SECRET
          {{- /* Look up existing deployment to get the current cookie secret if available */}}
          {{- $deploymentName := printf "%s-oauth2-proxy" .Release.Name }}
          {{- $existingDeployment := lookup "apps/v1" "Deployment" .Release.Namespace $deploymentName }}
          {{- if and $existingDeployment $existingDeployment.spec.template.spec.containers }}
            {{- range $container := $existingDeployment.spec.template.spec.containers }}
              {{- if eq $container.name "oauth2-proxy" }}
                {{- range $env := $container.env }}
                  {{- if eq $env.name "OAUTH2_PROXY_COOKIE_SECRET" }}
          value: {{ $env.value }}
                  {{- end }}
                {{- end }}
              {{- end }}
            {{- end }}
          {{- else }}
          # Generate a random cookie secret if no existing one is found
          value: {{ randAlphaNum 32 | b64enc | quote }}
          {{- end }}
        ports:
        - containerPort: 4180
          protocol: TCP
{{- end }}
