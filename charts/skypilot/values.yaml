apiService:
  image: berkeleyskypilot/skypilot:0.9.2
  # Number of replicas to deploy - replicas > 1 is not well tested, and requires
  # a PVC that supports ReadWriteMany (see accessMode in storage section below).
  replicas: 1
  preDeployHook: |-
    # Run commands before deploying the API server, e.g. installing an admin
    # policy. Remember to set the admin policy in the config section below.
    echo "Pre-deploy hook"

    # Uncomment the following lines to install the admin policy

    # echo "Installing admin policy"
    # pip install git+https://github.com/michaelvll/admin-policy-examples

  # Enable basic auth and user management in the API server
  # If enabled, the user can be created, updated, and deleted in the Dashboard,
  # and the basic auth will be done in the API server instead of the ingress.
  # If enabled, the basic auth configuration `ingress.authCredentials`
  # and `ingress.authSecret` in the ingress will be ignored.
  enableUserManagement: false
  # Enable service account tokens for automated API access
  # If enabled, users can create bearer tokens to bypass SSO authentication
  # for automated systems. This works independently of enableUserManagement.
  # JWT secrets are automatically stored in the database for persistence across restarts.
  enableServiceAccounts: true
  # Initial basic auth credentials for the API server
  # The user in the credentials will be used to create a new admin user in the API server,
  # and the password can be updated by the user in the Dashboard.
  # If both `initialBasicAuthCredentials` and `initialBasicAuthSecret` are set,
  # `initialBasicAuthSecret` will be used.
  # They are only used when `enableUserManagement` is true.
  initialBasicAuthCredentials: "skypilot:$apr1$c1h4rNxt$2NnL7dIDUV0tWsnuNMGSr/"
  initialBasicAuthSecret: null
  # Custom header name for user authentication (overrides default 'X-Auth-Request-Email')
  # If not set, the default header 'X-Auth-Request-Email' will be used
  authUserHeaderName: null
  # The number of seconds to wait for the API server to finish processing the request before shutting down.
  # If the API server is not able to finish processing the request within the grace period, the request will be aborted.
  # The default value is 60 seconds.
  terminationGracePeriodSeconds: 60

  # Set ~/.sky/config.yaml content on the API server
  # Updating this value will not restart the API server but it will take tens of seconds to take effect on the API server.
  # You can verify config updates on the server by exec-ing into the pod and running `cat ~/.sky/config.yaml`
  config: null
  # config: |
  #   admin_policy: admin_policy_examples.AddLabelsPolicy
  #
  #   kubernetes:
  #     allowed_contexts:
  #       - gke_sky-dev-465_us-central1-c_skypilot-test-cluster
  #       - gke_sky-dev-465_us-central1-c_skypilot-test-cluster-2
  #
  #   jobs:
  #     controller:
  #       resources:
  #         cpus: 2+
  #
  #   allowed_clouds:
  #     - aws
  #     - kubernetes

  # Set the DB connection string for the API server.
  # If this field is set, config must be null.
  dbConnectionSecretName: null

  # Set ~/.sky/ssh_node_pools.yaml content on the API server
  # Updating this value will not restart the API server but it will take tens of seconds to take effect on the API server.
  # You can verify config updates on the server by exec-ing into the pod and running `cat ~/.sky/ssh_node_pools.yaml`
  sshNodePools: null
  # sshNodePools: |
  #  my-cluster:
  #    hosts:
  #      - 1.2.3.4
  #      - 1.2.3.5
  #  my-box:
  #    hosts:
  #      - hostname_in_ssh_config
  # Optional secret that contains SSH keys for the API server to use, all the entries in the secret will be mounted to ~/.ssh/ directory in the API server.
  sshKeySecret: null
  # Metrics configuration for the API server.
  metrics:
    # Whether to enable metrics collection, default to false. If this is enabled and the API server image does not support metrics, the deployment will fail.
    enabled: false
    # The port to expose the metrics on, default to 9090.
    port: 9090
  # Custom annotations for the API server deployment
  annotations: null

  # Skip resource check for the API server, not recommended for production deployment
  skipResourceCheck: false
  # Set resource requests and limits for the API server
  resources:
    # Request a moderate amount of resources for an remote API server by default, which meets the
    # basic requirements for team usage at medium scale.
    requests:
      cpu: "4"
      memory: "8Gi"
    limits:
      cpu: "4"
      memory: "8Gi"

  # [Internal] Enable developer mode for SkyPilot
  skypilotDev: false

storage:
  # Enable/disable persistent storage
  enabled: true
  # Storage class name - leave empty to use cluster default
  storageClassName: ""
  # Access modes - ReadWriteOnce or ReadWriteMany depending on what is supported by the storage class
  accessMode: ReadWriteOnce
  # Storage size
  size: 10Gi
  # Optional selector for matching specific PVs
  selector: {}
    # matchLabels:
    #   environment: prod
  # Optional volume name for binding to specific PV
  volumeName: ""
  # Optional annotations
  annotations: {}


ingress:
  enabled: true
  # Name of the secret containing basic auth credentials for ingress. If not specified, a new secret will be created using authCredentials
  authSecret: null
  # Basic auth credentials in format "username:encrypted_password" (only used if ingress.authSecret is not set)
  authCredentials: "username:$apr1$encrypted_password"
  # Host to exclusively accept traffic from (optional) - will respond to all host requests if not set
  host: null
  # The base path of API server, you may use different path to expose multiple API server through a unified ingress-controller
  path: '/'
  # Ingress class name (for newer Kubernetes versions)
  ingressClassName: nginx

  # Whether enable an additional NodePort service for the ingress controller
  # Default to null for backward compatibility:
  # - For existing deployments, error out and ask users to set ingress.nodePortEnabled explicitly
  # - For new deployments, disable the NodePort service, equivalent to ingress.nodePortEnabled=false
  # So, for deployments that use default values, upgrade from 0.8.0 nightly will:
  # - Ask users to set ingress.nodePortEnabled explicitly
  # - Create a new LoadBalancer endpoint since ingress-nginx.controller.service.type is now default to LoadBalancer
  # It is recommended to keep only one endpoint by explicitly setting ingress.nodePortEnabled=false and switch to ingress-nginx.controller.service.type
  # if you are upgrading from 0.8.0 nightly.
  # Deprecated: use ingress-nginx.controller.service.type=NodePort instead
  # TODO(aylei): remove these fields in v0.10.0
  nodePortEnabled: null
  # Specific nodePort to use for the ingress controller
  # If not set, Kubernetes will assign random ports in the NodePort range (default 30000-32767)
  # Deprecated: use ingress-nginx.controller.service.nodePorts.http instead
  httpNodePort: 30050 # Set to null to automatically assign a random port
  # Deprecated: use ingress-nginx.controller.service.nodePorts.https instead
  httpsNodePort: 30051 # Set to null to automatically assign a random port

  # OAuth2 Proxy configuration for authentication
  oauth2-proxy:
    # Enable/disable OAuth2 Proxy deployment
    enabled: false
    # Docker image for OAuth2 Proxy
    image: "quay.io/oauth2-proxy/oauth2-proxy:v7.9.0"
    # Okta domain URL for OIDC issuer (required when enabled=true)
    oidc-issuer-url: null
    # Client ID from OIDC provider (Okta) (required when enabled=true)
    client-id: ""
    # Client Secret from OIDC provider (Okta) (required when enabled=true)
    client-secret: ""
    # Alternative: Get both client ID and client secret from a Kubernetes secret
    # If set to a secret name, both client-id and client-secret values above are ignored
    # The secret must contain keys named "client-id" and "client-secret"
    # If empty/null, the above client-id and client-secret values are used instead
    # See https://docs.skypilot.co/en/latest/reference/api-server/examples/api-server-auth-proxy.html#auth-proxy-client-secret
    client-details-from-secret: ""
    # Use HTTPS (set to true for production environments)
    use-https: false
    # Email domains to allow (use "*" for all domains)
    email-domain: "*"
    # Session storage settings ("cookie" or "redis")
    session-store-type: "redis"
    # Redis connection URL (redis://host[:port][/db-number])
    # If left as null and session-store-type is redis, a Redis instance will be deployed automatically
    # If set, this external Redis instance will be used
    redis-url: null
    # Cookie timing settings (in seconds)
    cookie-refresh: null  # refresh tokens after this duration (Access token lifespan minus 1 min)
    cookie-expire: null  # cookie expiration time (should match refresh token lifespan)

ingress-nginx:
  enabled: true
  controller:
    allowSnippetAnnotations: true
    service:
      type: LoadBalancer
      # Default annotations for the ingress controller service. We want an L4 loadbalancer by default for maximum compatibility,
      # especially for websocket SSH tunneling. Different cloud providers may require different annotations.
      # Annotations with no side effects are aggregated below to simplify the usage.
      annotations:
        # For AWS service reconciled by cloud-controller-manager, use NLB by default.
        # If you are using AWS Load Balancer Controller, refer to the following doc to configure annotations:
        # https://kubernetes-sigs.github.io/aws-load-balancer-controller/latest/guide/service/annotations/
        service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
        # For GKE, use backend service-based external passthrough Network Load Balancer as per best practices.
        # Ref: https://cloud.google.com/kubernetes-engine/docs/concepts/service-load-balancer#load_balancer_types
        cloud.google.com/l4-rbs: "enabled"
        # For Azure, override the healthz check protocol to TCP probe to avoid HTTP auth issues.
        service.beta.kubernetes.io/port_443_health-probe_protocol: "TCP"
        service.beta.kubernetes.io/port_80_health-probe_protocol: "TCP"
    config:
      http-snippet: |
        map $http_upgrade $connection_upgrade {
            default upgrade;
            ''      close;
        }

# RBAC controls the in-cluster permissions for the SkyPilot API server.
rbac:
  # If false, the serviceaccount and rbac policies will not be created. An external service account is expected in this case.
  create: true
  # If not specified, the service account name will be generated by the chart.
  serviceAccountName: ""
  # Namespace-scoped rules that are granted to the release namespace and rbac.grantedNamespaces.
  namespaceRules:
    # Required for managing pods and their lifecycle
    - apiGroups: [ "" ]
      resources: [ "pods", "pods/status", "pods/exec", "pods/portforward" ]
      verbs: [ "*" ]
    # Required for managing services for SkyPilot Pods
    - apiGroups: [ "" ]
      resources: [ "services" ]
      verbs: [ "*" ]
    # Required for managing SSH keys
    - apiGroups: [ "" ]
      resources: [ "secrets" ]
      verbs: [ "*" ]
    # Required for retrieving reason when Pod scheduling fails.
    - apiGroups: [ "" ]
      resources: [ "events" ]
      verbs: [ "get", "list", "watch" ]
    # Required for syncing workspace config changes to ConfigMap
    - apiGroups: [ "" ]
      resources: [ "configmaps" ]
      verbs: [ "get", "patch" ]
    # Required for high-availability controller
    - apiGroups: ["apps"]
      resources: ["deployments", "deployments/status"]
      verbs: ["*"]
    - apiGroups: [""]
      resources: ["persistentvolumeclaims"]
      verbs: ["*"]
  # Cluster-scoped rules for API server.
  clusterRules:
    # Required for getting node resources.
    - apiGroups: [ "" ]
      resources: [ "nodes" ]
      verbs: [ "get", "list", "watch" ]
    # Required for querying GPUs.
    - apiGroups: [ "" ]
      resources: [ "pods" ]
      verbs: [ "get", "list", "watch" ]
    # Required for autodetecting runtime classes
    - apiGroups: [ "node.k8s.io" ]
      resources: [ "runtimeclasses" ]
      verbs: [ "get", "list", "watch" ]
    # Required for exposing services.
    - apiGroups: [ "networking.k8s.io" ]
      resources: [ "ingressclasses" ]
      verbs: [ "get", "list", "watch" ]
    # Required for accessing ingress service.
    # TODO(aylei): unify the ingress of API server and task pods, then remove this.
    - apiGroups: [""]
      resources: ["services"]
      verbs: ["list", "get"]
  # This allows the API server to grant permissions to SkyPilot Pods and system components.
  # `kubernetes.remote_identity` must be specified in the sky config if this is disabled.
  manageRbacPolicies: true
  # This allows the API server to manage system components in the skypilot-system namespace.
  # Required for object store mounting.
  # You can disable this if you do not need additional capabilities of system components like
  # object store mounting or you manage system components manually, i.e. outside of SkyPilot.
  manageSystemComponents: true

# kubernetesCredentials add additional kubernetes cluster permissions to the API server.
kubernetesCredentials:
  # Enable/disable using the API server's cluster for workloads
  useApiServerCluster: true
  # Use the `kube-credentials` secret containing the kubeconfig to authenticate to Kubernetes
  useKubeconfig: false
  # Name of the secret containing the kubeconfig file. Only used if useKubeconfig is true.
  kubeconfigSecretName: kube-credentials
  # Namespace to use for in-cluster resources
  inclusterNamespace: null

awsCredentials:
  enabled: false
  # Name of the secret containing the aws credentials. Only used if enabled is true.
  awsSecretName: aws-credentials
  # Key name used to set AWS_ACCESS_KEY_ID.
  accessKeyIdKeyName: aws_access_key_id
  # Key name used to set AWS_SECRET_ACCESS_KEY.
  secretAccessKeyKeyName: aws_secret_access_key

gcpCredentials:
  enabled: false
  # TODO(romilb): This can be made optional by using the project in the key json by default.
  projectId: null
  # Name of the secret containing the gcp credentials. Only used if enabled is true.
  gcpSecretName: gcp-credentials

# Populate RunPod credentials from the secret with key `api_key`
runpodCredentials:
  enabled: false
  # Name of the secret containing the RunPod credentials. Only used if enabled is true.
  runpodSecretName: runpod-credentials

# Populate Lambda credentials from the secret with key `api_key`
lambdaCredentials:
  enabled: false
  # Name of the secret containing the Lambda credentials. Only used if enabled is true.
  lambdaSecretName: lambda-credentials

# Populate Nebius credentials from the secret with nebius credentials.
nebiusCredentials:
  enabled: false
  tenantId: null
  # Name of the secret containing the Nebius credentials. Only used if enabled is true.
  nebiusSecretName: nebius-credentials

# Extra init containers to run before the api container
extraInitContainers:

# Set securityContext for the api pod
podSecurityContext: {}

# Set securityContext for the api container inside the api pod
securityContext:
  capabilities:
    drop:
    - ALL
  allowPrivilegeEscalation: false

# Set the runtime class
runtimeClassName:

# Set configuration for Prometheus helm chart
prometheus:
  enabled: false
  # Refer to https://github.com/prometheus-community/helm-charts/blob/main/charts/prometheus/values.yaml for available values.
  # Keep the installation minimal by default. If you want to monitor more resources other than the API server,
  # it is recommended to install and manage prometheus separately.
  # SkyPilot API server will be automatically discovered by the prometheus if it runs with the default kubernetes discovery configuration.
  server:
    persistentVolume:
      enabled: true
      size: 10Gi
  # Configure additional scrape configs using extraScrapeConfigs
  extraScrapeConfigs: |
    # Static scrape target for SkyPilot API server GPU metrics
    - job_name: 'skypilot-api-server-gpu-metrics'
      static_configs:
        # Use the API service created by this Helm chart
        - targets: ['{{ .Release.Name }}-api-service.{{ .Release.Namespace }}.svc.cluster.local:80']
      metrics_path: '/gpu-metrics'
      scrape_interval: 15s
      scrape_timeout: 10s
      # Add labels to identify these metrics
  kube-state-metrics:
    enabled: true
    metricLabelsAllowlist:
      - pods=[skypilot-cluster]
  prometheus-node-exporter:
    enabled: false
  prometheus-pushgateway:
    enabled: false
  alertmanager:
    enabled: false

# Set configuration for Grafana helm chart
grafana:
  enabled: false
  # Refer to https://github.com/grafana/helm-charts/blob/main/charts/grafana/README.md for available values.
  persistence:
    enabled: true
    size: 10Gi
  # Uncomment the following to serve under a dedicated LoadBalancer
  # service:
  #   type: LoadBalancer
  # Serve under a subpath of the same ingress controller of the API server
  ingress:
    # Helm cannot template the auth secret for grafana ingress in values.yaml,
    # so we disable ingress of grafana by default to avoid conflicts with the
    # ingress with auth managed by our chart.
    enabled: false
    # Hack: this is used by our chart to control whether to create an ingress with auth for grafana.
    # The grafana subchart will NOT use this field, just keep this field here to make the configuration
    # of grafana coherent instead of spreading across different structs.
    enableAuthedIngress: true
    path: "/grafana"
    ingressClassName: nginx
    hosts: null
  grafana.ini:
    server:
      domain: localhost
      root_url: "%(protocol)s://%(domain)s/grafana"
      enforce_domain: false
      serve_from_sub_path: true
    security:
      allow_embedding: true
    auth.proxy:
      enabled: true
      header_name: "X-WEBAUTH-USER"
      header_property: "username"
      auto_sign_up: true
    auth:
      disable_login_form: true
      disable_signout_menu: true
    auth.anonymous:
      enabled: false
    auth.basic:
      enabled: false
  sidecar:
    # Enable datasources discovery in grafana sidecar.
    datasources:
      enabled: true
    # Enable dashboards discovery in grafana sidecar.
    dashboards:
      enabled: true
  # Add dashboard provider configuration to load dashboards from default directory
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        allowUiUpdates: false
        updateIntervalSeconds: 30
        options:
          path: /var/lib/grafana/dashboards/default
