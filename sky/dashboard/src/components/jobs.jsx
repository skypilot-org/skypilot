/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/X5tLGA3WPNU
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */
import React, { useState, useEffect, useRef } from 'react';
import { useRouter } from 'next/router';
import Link from 'next/link';
import {
  CircleIcon,
  FilledCircleIcon,
  SquareIcon,
  TickIcon,
} from '@/components/elements/icons';
import { CircularProgress } from '@mui/material';
import { Button } from '@/components/ui/button';

import { Card } from '@/components/ui/card';
import {
  Table,
  TableHeader,
  TableRow,
  TableHead,
  TableBody,
  TableCell,
} from '@/components/ui/table';
import {
  Select,
  SelectTrigger,
  SelectValue,
  SelectContent,
  SelectItem,
} from '@/components/ui/select';
import { getManagedJobs } from '@/data/connectors/jobs';
import { getClusters } from '@/data/connectors/clusters';
import { Layout } from '@/components/elements/layout';
import { EventTable } from '@/components/elements/events';
import { CustomTooltip as Tooltip, relativeTime } from '@/components/utils';
import {
  FileSearchIcon,
  RotateCwIcon,
  MonitorPlay,
  Filter,
  PowerIcon,
  RefreshCcw,
} from 'lucide-react';
import { streamClusterJobLogs } from '@/data/connectors/clusters';
import { handleJobAction } from '@/data/connectors/jobs';
import { ConfirmationModal } from '@/components/elements/modals';
import { isJobController } from '@/data/utils';

// Format duration from seconds to a readable format
export function formatDuration(durationInSeconds) {
  if (!durationInSeconds && durationInSeconds !== 0) return '-';

  // Convert to a whole number if it's a float
  durationInSeconds = Math.floor(durationInSeconds);

  const units = [
    { value: 86400, label: 'd' }, // days
    { value: 3600, label: 'h' },  // hours
    { value: 60, label: 'm' },    // minutes
    { value: 1, label: 's' }      // seconds
  ];

  let remaining = durationInSeconds;
  let result = '';
  let count = 0;

  for (const unit of units) {
    if (remaining >= unit.value && count < 2) {
      const value = Math.floor(remaining / unit.value);
      result += `${value}${unit.label} `;
      remaining %= unit.value;
      count++;
    }
  }

  return result.trim() || '0s';
}

export function ManagedJobs() {
  const [activeTab, setActiveTab] = useState('active');
  const [loading, setLoading] = useState(false);
  const refreshDataRef = React.useRef(null);
  const [confirmationModal, setConfirmationModal] = useState({
    isOpen: false,
    title: '',
    message: '',
    onConfirm: null,
  });
  const [counts, setCounts] = useState({ active: 0, finished: 0 });

  const handleRefresh = () => {
    if (refreshDataRef.current) {
      refreshDataRef.current();
    }
  };

  return (
    <Layout highlighted="jobs">
      <div className="flex items-center justify-between mb-4 h-5">
        <div className="text-base">
          <Link href="/jobs" className="text-sky-blue hover:underline leading-none">
            Managed Jobs
          </Link>
        </div>
        <div className="flex items-center space-x-2">
          {loading && (
            <div className="flex items-center mr-2">
              <CircularProgress size={15} className="mt-0" />
              <span className="ml-2 text-gray-500 text-sm">Loading...</span>
            </div>
          )}
          <Button
            variant="ghost"
            size="sm"
            onClick={handleRefresh}
            disabled={loading}
            className="text-sky-blue hover:text-sky-blue-bright"
            title="Refresh"
          >
            <RotateCwIcon className="h-4 w-4 mr-1.5" />
            <span>Refresh</span>
          </Button>
        </div>
      </div>
      <div className="flex flex-col space-y-4">
        {/* Activeness Filter */}
        <div className="flex items-center text-sm">
          <span className="mr-2 text-sm font-medium">Activeness:</span>
          <div className="flex space-x-2">
            <button
              onClick={() => setActiveTab('active')}
              className={`px-3 py-1 rounded-full flex items-center space-x-2 ${
                activeTab === 'active'
                  ? 'bg-green-50 text-green-700'
                  : 'bg-gray-50 text-gray-600 hover:bg-green-50 hover:text-green-700'
              }`}
            >
              <span>ACTIVE</span>
              <span className={`text-xs ${activeTab === 'active' ? 'bg-green-100' : 'bg-gray-200'} px-1.5 py-0.5 rounded`}>
                {counts.active}
              </span>
            </button>
            <button
              onClick={() => setActiveTab('finished')}
              className={`px-3 py-1 rounded-full flex items-center space-x-2 ${
                activeTab === 'finished'
                  ? 'bg-blue-50 text-blue-700'
                  : 'bg-gray-50 text-gray-600 hover:bg-blue-50 hover:text-blue-700'
              }`}
            >
              <span>FINISHED</span>
              <span className={`text-xs ${activeTab === 'finished' ? 'bg-blue-100' : 'bg-gray-200'} px-1.5 py-0.5 rounded`}>
                {counts.finished}
              </span>
            </button>
          </div>
        </div>
      </div>
      <ManagedJobsTable
        activeTab={activeTab}
        refreshInterval={20000}
        setLoading={setLoading}
        refreshDataRef={refreshDataRef}
        onCountsChange={setCounts}
      />
      <ConfirmationModal
        isOpen={confirmationModal.isOpen}
        onClose={() => setConfirmationModal({ ...confirmationModal, isOpen: false })}
        onConfirm={confirmationModal.onConfirm}
        title={confirmationModal.title}
        message={confirmationModal.message}
      />
    </Layout>
  );
}

export function ManagedJobsTable({
  activeTab,
  refreshInterval,
  setLoading,
  refreshDataRef,
  onCountsChange,
}) {
  const [data, setData] = useState([]);
  const [sortConfig, setSortConfig] = useState({
    key: null,
    direction: 'ascending',
  });
  const [loading, setLocalLoading] = useState(false);
  const [isInitialLoad, setIsInitialLoad] = useState(true);
  const [currentPage, setCurrentPage] = useState(1);
  const [pageSize, setPageSize] = useState(10);
  const [expandedRowId, setExpandedRowId] = useState(null);
  const expandedRowRef = useRef(null);
  const [selectedStatus, setSelectedStatus] = useState('All');
  const [controllerStopped, setControllerStopped] = useState(false);
  const [confirmationModal, setConfirmationModal] = useState({
    isOpen: false,
    title: '',
    message: '',
    onConfirm: null,
  });

  const router = useRouter();

  // Function to scroll to a specific section
  const scrollToSection = (sectionId) => {
    const element = document.getElementById(sectionId);
    if (element) {
      element.scrollIntoView({ behavior: 'smooth' });
    }
  };

  const handleRestartController = async () => {
    setConfirmationModal({
      isOpen: true,
      title: 'Restart Controller',
      message: 'Are you sure you want to restart the controller? This will temporarily interrupt job management.',
      onConfirm: async () => {
        try {
          setLocalLoading(true);
          await handleJobAction('restartcontroller', null, null, true);
          // Refresh data after restarting the controller
          await fetchData();
        } catch (err) {
          console.error('Error restarting controller:', err);
        } finally {
          setLocalLoading(false);
        }
      },
    });
  };

  const fetchData = React.useCallback(async () => {
    setLocalLoading(true);
    setLoading(true); // Set parent loading state
    try {
      // Fetch both jobs and clusters data in parallel
      const [jobsResponse, clustersData] = await Promise.all([
        getManagedJobs(),
        getClusters()
      ]);

      const { jobs, controllerStopped } = jobsResponse;
      // for the clusters, check if there is a cluster that `isJobController`
      const jobControllerCluster = clustersData.find(c => isJobController(c.cluster));
      const jobControllerClusterStatus = jobControllerCluster ? jobControllerCluster.status : 'NOT_FOUND';
      let isControllerStopped=false
      if (jobControllerClusterStatus=='STOPPED' && controllerStopped) {
        isControllerStopped=true
      }

      setData(jobs);
      setControllerStopped(isControllerStopped);
    } catch (err) {
      console.error('Error fetching data:', err);
      setData([]);
    } finally {
      setLocalLoading(false);
      setLoading(false); // Clear parent loading state
      setIsInitialLoad(false);
    }
  }, [setLoading]);

  // Expose fetchData to parent component
  React.useEffect(() => {
    if (refreshDataRef) {
      refreshDataRef.current = fetchData;
    }
  }, [refreshDataRef, fetchData]);

  useEffect(() => {
    setData([]);
    let isCurrent = true;

    fetchData();

    const interval = setInterval(() => {
      if (isCurrent) {
        fetchData();
      }
    }, refreshInterval);

    return () => {
      isCurrent = false;
      clearInterval(interval);
    };
  }, [refreshInterval, fetchData]);

  // Sort the data if sortConfig is present
  const sortedData = React.useMemo(() => {
    if (!sortConfig.key) return data;

    return [...data].sort((a, b) => {
      if (a[sortConfig.key] < b[sortConfig.key]) {
        return sortConfig.direction === 'ascending' ? -1 : 1;
      }
      if (a[sortConfig.key] > b[sortConfig.key]) {
        return sortConfig.direction === 'ascending' ? 1 : -1;
      }
      return 0;
    });
  }, [data, sortConfig]);

  // Reset to first page when activeTab changes or when data changes
  useEffect(() => {
    setCurrentPage(1);
  }, [activeTab, data.length]);

  // Reset status filter when activeTab changes
  useEffect(() => {
    setSelectedStatus('All');
  }, [activeTab]);

  const requestSort = (key) => {
    let direction = 'ascending';
    if (sortConfig.key === key && sortConfig.direction === 'ascending') {
      direction = 'descending';
    }
    setSortConfig({ key, direction });
  };

  const getSortDirection = (key) => {
    if (sortConfig.key === key) {
      return sortConfig.direction === 'ascending' ? ' ↑' : ' ↓';
    }
    return '';
  };

  // Calculate active and finished counts
  const activeCount = data.filter(item =>
    ['RUNNING', 'RECOVERING', 'PENDING', 'SUBMITTED', 'STARTING', 'CANCELLING'].includes(item.status)
  ).length;

  const finishedCount = data.filter(item =>
    ['SUCCEEDED', 'FAILED', 'CANCELLED', 'FAILED_SETUP', 'FAILED_PRECHECKS', 'FAILED_NO_RESOURCE', 'FAILED_CONTROLLER'].includes(item.status)
  ).length;

  // Update counts in parent component
  useEffect(() => {
    onCountsChange({ active: activeCount, finished: finishedCount });
  }, [activeCount, finishedCount, onCountsChange]);

  // First, keep the activeTab filter
  const filteredData = sortedData
    .filter((item) => {
      if (activeTab === 'active') {
        return [
          'RUNNING',
          'RECOVERING',
          'PENDING',
          'SUBMITTED',
          'STARTING',
          'CANCELLING',
        ].includes(item.status);
      } else {
        return [
          'SUCCEEDED',
          'FAILED',
          'CANCELLED',
          'FAILED_SETUP',
          'FAILED_PRECHECKS',
          'FAILED_NO_RESOURCE',
          'FAILED_CONTROLLER',
        ].includes(item.status);
      }
    });

  // Calculate status counts from the filtered data
  const statusCounts = React.useMemo(() => {
    const counts = {
      All: filteredData.length,
    };
    filteredData.forEach(item => {
      counts[item.status] = (counts[item.status] || 0) + 1;
    });
    return counts;
  }, [filteredData]);

  // Apply status filter
  const statusFilteredData = React.useMemo(() => {
    if (selectedStatus === 'All') return filteredData;
    return filteredData.filter(item => item.status === selectedStatus);
  }, [filteredData, selectedStatus]);

  // Calculate pagination
  const totalPages = Math.ceil(statusFilteredData.length / pageSize);
  const startIndex = (currentPage - 1) * pageSize;
  const endIndex = startIndex + pageSize;

  // Page navigation handlers
  const goToPreviousPage = () => {
    setCurrentPage((page) => Math.max(page - 1, 1));
  };

  const goToNextPage = () => {
    setCurrentPage((page) => Math.min(page + 1, totalPages));
  };

  const handlePageSizeChange = (e) => {
    const newSize = parseInt(e.target.value, 10);
    setPageSize(newSize);
    setCurrentPage(1); // Reset to first page when changing page size
  };

  const paginatedData = statusFilteredData.slice(startIndex, endIndex);

  return (
    <div className="relative">
      {/* Status Filter Bar */}
      <div className="flex items-center mb-4 text-sm">
        <span className="text-sm font-medium">Status:</span>
        <div className="flex flex-wrap gap-2">
          <button
            onClick={() => setSelectedStatus('All')}
            className={`px-3 py-1 rounded-full flex items-center space-x-2 ${
              selectedStatus === 'All'
                ? 'bg-sky-50 text-sky-700'
                : 'bg-gray-50 text-gray-600 hover:bg-sky-50 hover:text-sky-700'
            }`}
          >
            <span>All</span>
            <span className={`text-xs ${selectedStatus === 'All' ? 'bg-sky-100' : 'bg-gray-200'} px-1.5 py-0.5 rounded`}>
              {statusCounts.All}
            </span>
          </button>
          {Object.entries(statusCounts)
            .filter(([status]) => status !== 'All')
            .map(([status, count]) => {
              const badgeStyle = getBadgeStyle(status);
              return (
                <button
                  key={status}
                  onClick={() => setSelectedStatus(selectedStatus === status ? 'All' : status)}
                  className={`px-3 py-1 rounded-full flex items-center space-x-2 ${
                    selectedStatus === status
                      ? `${badgeStyle}`
                      : 'bg-gray-50 text-gray-600 hover:bg-gray-100'
                  }`}
                >
                  <span>{status}</span>
                  <span className={`text-xs ${selectedStatus === status ? 'bg-white/50' : 'bg-gray-200'} px-1.5 py-0.5 rounded`}>
                    {count}
                  </span>
                </button>
              );
            })}
        </div>
      </div>

      <Card>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead
                className="sortable whitespace-nowrap"
                onClick={() => requestSort('id')}
              >
                ID{getSortDirection('id')}
              </TableHead>
              <TableHead
                className="sortable whitespace-nowrap"
                onClick={() => requestSort('name')}
              >
                Name{getSortDirection('name')}
              </TableHead>
              <TableHead
                className="sortable whitespace-nowrap"
                onClick={() => requestSort('user')}
              >
                User{getSortDirection('user')}
              </TableHead>
              <TableHead
                className="sortable whitespace-nowrap"
                onClick={() => requestSort('submitted_at')}
              >
                Submitted{getSortDirection('submitted_at')}
              </TableHead>
              <TableHead
                className="sortable whitespace-nowrap"
                onClick={() => requestSort('job_duration')}
              >
                Duration{getSortDirection('job_duration')}
              </TableHead>
              <TableHead
                className="sortable whitespace-nowrap"
                onClick={() => requestSort('status')}
              >
                Status{getSortDirection('status')}
              </TableHead>
              <TableHead
                className="sortable whitespace-nowrap"
                onClick={() => requestSort('resources')}
              >
                Resources{getSortDirection('resources')}
              </TableHead>
              <TableHead
                className="sortable whitespace-nowrap"
                onClick={() => requestSort('cluster')}
              >
                Cluster{getSortDirection('cluster')}
              </TableHead>
              <TableHead
                className="sortable whitespace-nowrap"
                onClick={() => requestSort('region')}
              >
                Region{getSortDirection('region')}
              </TableHead>
              <TableHead
                className="sortable whitespace-nowrap"
                onClick={() => requestSort('recoveries')}
              >
                Recoveries{getSortDirection('recoveries')}
              </TableHead>
              <TableHead>Details</TableHead>
              <TableHead>Logs</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {loading && isInitialLoad ? (
              <TableRow>
                <TableCell
                  colSpan={11}
                  className="text-center py-6 text-gray-500"
                >
                  <div className="flex justify-center items-center">
                    <CircularProgress size={20} className="mr-2" />
                    <span>Loading...</span>
                  </div>
                </TableCell>
              </TableRow>
            ) : paginatedData.length > 0 ? (
              <>
                {paginatedData.map((item) => (
                  <React.Fragment key={item.id}>
                    <TableRow>
                      <TableCell>
                        <Link href={`/jobs/${item.id}`} className="text-blue-600">
                          {item.id}
                        </Link>
                      </TableCell>
                      <TableCell>
                        <Link href={`/jobs/${item.id}`} className="text-blue-600">
                          {item.name}
                        </Link>
                      </TableCell>
                      <TableCell>{item.user}</TableCell>
                      <TableCell>{relativeTime(item.submitted_at)}</TableCell>
                      <TableCell>{formatDuration(item.job_duration)}</TableCell>
                      <TableCell>
                        <Status2Icon status={item.status} />
                      </TableCell>
                      <TableCell>{item.resources}</TableCell>
                      <TableCell>{item.cluster}</TableCell>
                      <TableCell>{item.region}</TableCell>
                      <TableCell>{item.recoveries}</TableCell>
                      <TableCell>
                        {item.details ? (
                          <TruncatedDetails
                            text={item.details}
                            rowId={item.id}
                            expandedRowId={expandedRowId}
                            setExpandedRowId={setExpandedRowId}
                          />
                        ) : (
                          '-'
                        )}
                      </TableCell>
                      <TableCell>
                        <Status2Actions
                          jobParent="/jobs"
                          jobId={item.id}
                          jobName={item.name}
                          status={item.status}
                          managed={true}
                          cluster="job controller"
                        />
                      </TableCell>
                    </TableRow>
                    {expandedRowId === item.id && (
                      <ExpandedDetailsRow
                        text={item.details}
                        colSpan={12}
                        innerRef={expandedRowRef}
                      />
                    )}
                  </React.Fragment>
                ))}
              </>
            ) : (
              <TableRow>
                <TableCell
                  colSpan={11}
                  className="text-center py-6"
                >
                  <div className="flex flex-col items-center space-y-4">
                    {!controllerStopped && (
                      <p className="text-gray-500">No active jobs</p>
                    )}
                    {controllerStopped && (
                      <div className="flex flex-col items-center space-y-2">
                        <p className="text-gray-700">The managed job controller has been stopped. Please restart it to check the latest job status.</p>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={handleRestartController}
                          className="text-sky-blue hover:text-sky-blue-bright"
                          disabled={loading}
                        >
                          <RefreshCcw className="h-4 w-4 mr-2" />
                          Restart Controller
                        </Button>
                      </div>
                    )}
                  </div>
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </Card>

      {/* Pagination controls */}
      {statusFilteredData.length > 0 && (
        <div className="flex justify-end items-center py-2 px-4 text-sm text-gray-700">
          <div className="flex items-center space-x-4">
            <div className="flex items-center">
              <span className="mr-2">Rows per page:</span>
              <div className="relative inline-block">
                <select
                  value={pageSize}
                  onChange={handlePageSizeChange}
                  className="py-1 pl-2 pr-6 appearance-none outline-none cursor-pointer border-none bg-transparent"
                  style={{ minWidth: '40px' }}
                >
                  <option value={10}>10</option>
                  <option value={30}>30</option>
                  <option value={50}>50</option>
                  <option value={100}>100</option>
                  <option value={200}>200</option>
                </select>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-4 w-4 text-gray-500 absolute right-0 top-1/2 transform -translate-y-1/2 pointer-events-none"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M19 9l-7 7-7-7"
                  />
                </svg>
              </div>
            </div>
            <div>
              {startIndex + 1} – {Math.min(endIndex, statusFilteredData.length)} of{' '}
              {statusFilteredData.length}
            </div>
            <div className="flex items-center space-x-2">
              <Button
                variant="ghost"
                size="icon"
                onClick={goToPreviousPage}
                disabled={currentPage === 1}
                className="text-gray-500 h-8 w-8 p-0"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  className="chevron-left"
                >
                  <path d="M15 18l-6-6 6-6" />
                </svg>
              </Button>
              <Button
                variant="ghost"
                size="icon"
                onClick={goToNextPage}
                disabled={currentPage === totalPages || totalPages === 0}
                className="text-gray-500 h-8 w-8 p-0"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  className="chevron-right"
                >
                  <path d="M9 18l6-6-6-6" />
                </svg>
              </Button>
            </div>
          </div>
        </div>
      )}

      <ConfirmationModal
        isOpen={confirmationModal.isOpen}
        onClose={() => setConfirmationModal({ ...confirmationModal, isOpen: false })}
        onConfirm={confirmationModal.onConfirm}
        title={confirmationModal.title}
        message={confirmationModal.message}
      />
    </div>
  );
}

// Helper function to get status-specific styling
function getBadgeStyle(status) {
  switch (status) {
    case 'RUNNING':
      return 'bg-green-50 text-green-700';
    case 'PENDING':
      return 'bg-yellow-50 text-yellow-700';
    case 'SUCCEEDED':
      return 'bg-blue-50 text-blue-700';
    case 'FAILED':
      return 'bg-red-50 text-red-700';
    case 'CANCELLED':
      return 'bg-rose-50 text-rose-700';
    case 'RECOVERING':
      return 'bg-orange-50 text-orange-700';
    case 'SUBMITTED':
      return 'bg-indigo-50 text-indigo-700';
    case 'STARTING':
      return 'bg-cyan-50 text-cyan-700';
    case 'CANCELLING':
      return 'bg-rose-50 text-rose-700';
    case 'FAILED_SETUP':
      return 'bg-pink-50 text-pink-700';
    case 'FAILED_PRECHECKS':
      return 'bg-red-50 text-red-700';
    case 'FAILED_NO_RESOURCE':
      return 'bg-red-50 text-red-700';
    case 'FAILED_CONTROLLER':
      return 'bg-red-50 text-red-700';
    default:
      return 'bg-gray-100 text-gray-800';
  }
}

export function JobDetails({
  clusterName,
  jobData,
  parent,
  parentLink,
  withEvents = true,
  highlighted = 'jobs',
  actionButtons,
  customHeader,
  hideTabs = false,
  loading = false,
}) {
  const [isLoadingLogs, setIsLoadingLogs] = useState(false);
  const [isLoadingControllerLogs, setIsLoadingControllerLogs] = useState(false);
  const [logs, setLogs] = useState([]);
  const router = useRouter();
  const isClusterJobPage = router.pathname.includes('/clusters/[cluster]/[job]');

  // Clear logs when jobData.id changes
  useEffect(() => {
    setLogs([]);
  }, [jobData.id]);

  // Fetch logs when component mounts or jobData.id changes
  useEffect(() => {
    let active = true;

    if (clusterName && jobData.id) {
      setIsLoadingLogs(true);

      streamClusterJobLogs({
        clusterName: clusterName,
        jobId: jobData.id,
        onNewLog: (log) => {
          if (active) {
            const strippedLog = formatLogs(log);
            setLogs((prevLogs) => [...prevLogs, strippedLog]);
          }
        },
      })
        .then(() => {
          if (active) {
            setIsLoadingLogs(false);
          }
        })
        .catch((error) => {
          if (active) {
            console.error('Error streaming logs:', error);
            setIsLoadingLogs(false);
          }
        });
    }

    return () => {
      active = false;
    };
  }, [clusterName, jobData.id]);

  return (
    <Layout highlighted={highlighted}>
      {customHeader || (
        <div className="flex items-center justify-between mb-4">
          <div className="text-base flex items-center">
            {parentLink && (
              <>
                <Link href={parentLink} className="text-sky-blue hover:underline">
                  {parent}
                </Link>
                <span className="mx-2 text-gray-500">›</span>
              </>
            )}
            <span className="text-gray-900">{jobData.id}</span>
          </div>
        </div>
      )}

      {/* Display all sections directly on the page */}
      <div className="space-y-8">
        {/* Info Section */}
        <div id="details">
          <Card>
            <div className="flex items-center justify-between px-4 pt-4">
              <h2 className="text-lg font-semibold">Details</h2>
            </div>
            <div className="p-4">
              <div className="grid grid-cols-2 gap-6">
                <div>
                  <div className="text-gray-600 font-medium text-base">Job ID</div>
                  <div className="text-base mt-1">{jobData.id}</div>
                </div>
                <div>
                  <div className="text-gray-600 font-medium text-base">Job Name</div>
                  <div className="text-base mt-1">{jobData.job}</div>
                </div>
                <div>
                  <div className="text-gray-600 font-medium text-base">User</div>
                  <div className="text-base mt-1">{jobData.user}</div>
                </div>
                <div>
                  <div className="text-gray-600 font-medium text-base">Status</div>
                  <div className="text-base mt-1">
                    <Status2Icon status={jobData.status} />
                  </div>
                </div>
                {jobData.resources && (
                  <div>
                    <div className="text-gray-600 font-medium text-base">Resources</div>
                    <div className="text-base mt-1">{jobData.resources || 'N/A'}</div>
                  </div>
                )}
                {jobData.cluster && (
                  <div>
                    <div className="text-gray-600 font-medium text-base">Cluster</div>
                    <div className="text-base mt-1">
                      <Link
                        href={`/clusters/${jobData.cluster}`}
                        className="text-sky-blue hover:underline"
                      >
                        {jobData.cluster}
                      </Link>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </Card>
        </div>

        {/* Logs Section */}
        <div id="logs" className="mt-6">
          <Card>
            <div className="flex items-center justify-between px-4 pt-4">
              <h2 className="text-lg font-semibold">Logs</h2>
            </div>
            <div className="p-4">
              {isLoadingLogs ? (
                <div className="flex items-center justify-center py-4">
                  <CircularProgress size={20} className="mr-2" />
                  <span>Loading...</span>
                </div>
              ) : (
                <div className="max-h-96 overflow-y-auto" style={contentStyle}>
                  <LogFilter logs={logs.join('')} />
                </div>
              )}
            </div>
          </Card>
        </div>
      </div>
    </Layout>
  );
}

export function formatLogs(str) {
  if (!str) return '';

  // First remove ANSI escape codes
  let result = stripAnsiCodes(str);

  // Remove all HTML-like tags while preserving their content
  // This handles both paired tags like <tag>content</tag> and standalone tags like <tag>
  result = result.replace(/<[^>]*>(.*?)<\/[^>]*>/g, '$1'); // Remove paired tags but keep content
  result = result.replace(/<[^>]*>/g, ''); // Remove any remaining standalone tags

  // Remove formatting markers like [dim] and [/dim]
  result = result.replace(/\[([^\]]+)\]/g, ''); // This will remove any text in square brackets

  return result;
}

export function stripAnsiCodes(str) {
  return str.replace(/\x1b\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGKH]/g, '');
}

function extractNodeTypes(logs) {
  const nodePattern = /\((head|worker\d+),/g; // Matches 'head' or 'worker' followed by any number
  const nodeTypes = new Set();

  let match;
  while ((match = nodePattern.exec(logs)) !== null) {
    nodeTypes.add(match[1]); // Add the node type to the set
  }

  const sortedNodeTypes = Array.from(nodeTypes).sort((a, b) => {
    if (a === 'head') return -1;
    if (b === 'head') return 1;
    return a.localeCompare(b, undefined, {
      numeric: true,
      sensitivity: 'base',
    });
  });

  return sortedNodeTypes; // Return sorted array
}

export function LogFilter({ logs, controller=false }) {
  const [selectedNode, setSelectedNode] = useState('all');
  const [filteredLogs, setFilteredLogs] = useState(logs);
  const [nodeTypes, setNodeTypes] = useState([]);

  useEffect(() => {
    setNodeTypes(extractNodeTypes(logs));
  }, [logs]);

  useEffect(() => {
    if (selectedNode === 'all') {
      setFilteredLogs(logs);
    } else {
      const filtered = logs
        .split('\n')
        .filter((line) => line.includes(`(${selectedNode},`));
      setFilteredLogs(filtered.join('\n'));
    }
  }, [selectedNode, logs]);

  return (
    <div>
      {!controller && (
        <>
          <Select
            onValueChange={(value) => setSelectedNode(value)}
            value={selectedNode}
          >
            <SelectTrigger aria-label="Node">
              <SelectValue placeholder="Select Node" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Nodes</SelectItem>
              {nodeTypes.map((node) => (
                <SelectItem key={node} value={node}>
                  {node}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          <br />
        </>
      )}
      <pre style={{ whiteSpace: 'pre-wrap', wordBreak: 'break-word' }}>
        {filteredLogs}
      </pre>
    </div>
  );
}
export const contentStyle = {
  height: '80%',
  overflowY: 'scroll',
  padding: '30px',
  backgroundColor: '#f7f7f7',
};

function ActiveTab({ clusterName, jobData, activeTab, setLoading }) {
  const [logs, setLogs] = useState([]);
  const router = useRouter();
  const isClusterJobPage = router.pathname.includes(
    '/clusters/[cluster]/[job]'
  ); // Check if we're on the clusters job page

  // Clear logs when activeTab changes or when jobData.id changes
  useEffect(() => {
    setLogs([]);
  }, [activeTab, jobData.id]);

  // Only fetch logs when actually viewing the logs tab
  useEffect(() => {
    let active = true;

    if (activeTab === 'logs' && clusterName && jobData.id) {
      setLoading(true);

      streamClusterJobLogs({
        clusterName: clusterName,
        jobId: jobData.id,
        onNewLog: (log) => {
          if (active) {
            const strippedLog = formatLogs(log);
            setLogs((prevLogs) => [...prevLogs, strippedLog]);
          }
        },
      })
        .then(() => {
          if (active) {
            setLoading(false);
          }
        })
        .catch((error) => {
          if (active) {
            console.error('Error streaming logs:', error);
            setLoading(false);
          }
        });
    } else if (activeTab !== 'logs') {
      setLoading(false);
    }

    return () => {
      active = false;
    };
  }, [activeTab, clusterName, jobData.id, setLoading]);

  // For clusters job page with hidden tabs, we want to show different content based on the URL tab parameter
  if (isClusterJobPage) {
    if (activeTab === 'logs') {
      return (
        <div className="items-center mb-6">
          <Card style={contentStyle}>
            <LogFilter logs={logs.join('')} />
          </Card>
        </div>
      );
    }

    // Default to info tab for hidden tabs
    return (
      <div className="items-center mb-6">
        <Card className="p-3">
          <div className="grid grid-cols-2 gap-6">
            <div>
              <div className="text-gray-600 font-medium text-base">Job ID</div>
              <div className="text-base mt-1">{jobData.id}</div>
            </div>
            <div>
              <div className="text-gray-600 font-medium text-base">User</div>
              <div className="text-base mt-1">{jobData.user}</div>
            </div>
            <div>
              <div className="text-gray-600 font-medium text-base">Status</div>
              <div className="text-base mt-1">
                <Status2Icon status={jobData.status} />
              </div>
            </div>
            {jobData.resources && (
              <div>
                <div className="text-gray-600 font-medium text-base">Resources</div>
                <div className="text-base mt-1">{jobData.resources || 'N/A'}</div>
              </div>
            )}
            <div>
              <div className="text-gray-600 font-medium text-base">Job Name</div>
              <div className="text-base mt-1">{jobData.job}</div>
            </div>
            {jobData.cluster && (
              <div>
                <div className="text-gray-600 font-medium text-base">Cluster</div>
                <div className="text-base mt-1">
                  <Link
                    href={`/clusters/${jobData.cluster}`}
                    className="text-sky-blue hover:underline"
                  >
                    {jobData.cluster}
                  </Link>
                </div>
              </div>
            )}
            {jobData.infra && (
              <div>
                <div className="text-gray-600 font-medium text-base">Infra</div>
                <div className="text-base mt-1">{jobData.infra}</div>
              </div>
            )}
          </div>
        </Card>
      </div>
    );
  }
}

function status2Icon(status) {
  const badgeClasses =
    'inline-flex items-center px-2 py-1 rounded-full';
  switch (status) {
    case 'RUNNING':
      return (
        <span className={`${badgeClasses} bg-green-50 text-green-700`}>
          <FilledCircleIcon className="w-2 h-2 mr-2" />
          RUNNING
        </span>
      );
    case 'PENDING':
      return (
        <span className={`${badgeClasses} bg-yellow-50 text-yellow-700`}>
          <CircleIcon className="w-2 h-2 mr-2" />
          PENDING
        </span>
      );
    case 'SUCCEEDED':
      return (
        <span className={`${badgeClasses} bg-blue-50 text-blue-700`}>
          <TickIcon className="w-2 h-2 mr-2" />
          SUCCEEDED
        </span>
      );
    case 'FAILED':
      return (
        <span className={`${badgeClasses} bg-red-50 text-red-700`}>
          <SquareIcon className="w-2 h-2 mr-2" />
          FAILED
        </span>
      );
    case 'CANCELLED':
      return (
        <span className={`${badgeClasses} bg-rose-50 text-rose-700`}>
          <SquareIcon className="w-2 h-2 mr-2" />
          CANCELLED
        </span>
      );
    case 'RECOVERING':
      return (
        <span className={`${badgeClasses} bg-orange-50 text-orange-700`}>
          <CircleIcon className="w-2 h-2 mr-2" />
          RECOVERING
        </span>
      );
    case 'SUBMITTED':
      return (
        <span className={`${badgeClasses} bg-indigo-50 text-indigo-700`}>
          <CircleIcon className="w-2 h-2 mr-2" />
          SUBMITTED
        </span>
      );
    case 'STARTING':
      return (
        <span className={`${badgeClasses} bg-cyan-50 text-cyan-700`}>
          <CircularProgress size={12} className="w-2 h-2 mr-2" />
          STARTING
        </span>
      );
    case 'CANCELLING':
      return (
        <span className={`${badgeClasses} bg-rose-50 text-rose-700`}>
          <CircleIcon className="w-2 h-2 mr-2" />
          CANCELLING
        </span>
      );
    case 'FAILED_SETUP':
      return (
        <span className={`${badgeClasses} bg-pink-50 text-pink-700`}>
          <CircleIcon className="w-2 h-2 mr-2" />
          FAILED_SETUP
        </span>
      );
    case 'FAILED_PRECHECKS':
      return (
        <span className={`${badgeClasses} bg-red-50 text-red-700`}>
          <CircleIcon className="w-2 h-2 mr-2" />
          FAILED_PRECHECKS
        </span>
      );
    case 'FAILED_NO_RESOURCE':
      return (
        <span className={`${badgeClasses} bg-red-50 text-red-700`}>
          <CircleIcon className="w-2 h-2 mr-2" />
          FAILED_NO_RESOURCE
        </span>
      );
    case 'FAILED_CONTROLLER':
      return (
        <span className={`${badgeClasses} bg-red-50 text-red-700`}>
          <CircleIcon className="w-2 h-2 mr-2" />
          FAILED_CONTROLLER
        </span>
      );
    default:
      return (
        <span className={`${badgeClasses} bg-gray-100 text-gray-800`}>
          <FilledCircleIcon className="w-3 h-3 mr-1" />
          {status}
        </span>
      );
  }
}

export function Status2Icon({ status }) {
  return (
    <Tooltip content={status} className="text-muted-foreground text-sm">
      <span>{status2Icon(status)}</span>
    </Tooltip>
  );
}

export function Status2Actions({
  withLabel = false,
  jobParent,
  jobId,
  jobName,
  status,
  managed,
  cluster,
}) {
  const router = useRouter();

  const handleLogsClick = (e, type) => {
    e.preventDefault();
    e.stopPropagation();
    router.push({
      pathname: `${jobParent}/${jobId}`,
      query: { tab: type },
    });
  };

  return (
    <div className="flex items-center space-x-4">
      <Tooltip
        key="logs"
        content="View Job Logs"
        className="capitalize text-sm text-muted-foreground"
      >
        <button
          onClick={(e) => handleLogsClick(e, 'logs')}
          className="text-sky-blue hover:text-sky-blue-bright font-medium inline-flex items-center h-8"
        >
          <FileSearchIcon className="w-4 h-4" />
          {withLabel && <span className="ml-1.5">Logs</span>}
        </button>
      </Tooltip>
      {managed && (
        <Tooltip
          key="controllerlogs"
          content="View Controller Logs"
          className="capitalize text-sm text-muted-foreground"
        >
          <button
            onClick={(e) => handleLogsClick(e, 'controllerlogs')}
            className="text-sky-blue hover:text-sky-blue-bright font-medium inline-flex items-center h-8"
          >
            <MonitorPlay className="w-4 h-4" />
            {withLabel && <span className="ml-2">Controller Logs</span>}
          </button>
        </Tooltip>
      )}
    </div>
  );
}

export function ClusterJobs({ clusterName, clusterJobData, loading }) {
  const [expandedRowId, setExpandedRowId] = useState(null);
  const [sortConfig, setSortConfig] = useState({
    key: null,
    direction: 'ascending',
  });
  const [currentPage, setCurrentPage] = useState(1);
  const [pageSize, setPageSize] = useState(10);
  const expandedRowRef = useRef(null);
  const [prevClusterJobData, setPrevClusterJobData] = useState(null);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (
        expandedRowId &&
        expandedRowRef.current &&
        !expandedRowRef.current.contains(event.target)
      ) {
        setExpandedRowId(null);
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [expandedRowId]);

  const jobData = React.useMemo(() => {
    return clusterJobData || [];
  }, [clusterJobData]);

  useEffect(() => {
    // Check if the data has changed significantly (new data received)
    if (JSON.stringify(clusterJobData) !== JSON.stringify(prevClusterJobData)) {
      setPrevClusterJobData(clusterJobData);
    }
  }, [clusterJobData, prevClusterJobData]);

  // Sort the data if sortConfig is present
  const sortedData = React.useMemo(() => {
    if (!sortConfig.key) return jobData;

    return [...jobData].sort((a, b) => {
      if (a[sortConfig.key] < b[sortConfig.key]) {
        return sortConfig.direction === 'ascending' ? -1 : 1;
      }
      if (a[sortConfig.key] > b[sortConfig.key]) {
        return sortConfig.direction === 'ascending' ? 1 : -1;
      }
      return 0;
    });
  }, [jobData, sortConfig]);

  const requestSort = (key) => {
    let direction = 'ascending';
    if (sortConfig.key === key && sortConfig.direction === 'ascending') {
      direction = 'descending';
    }
    setSortConfig({ key, direction });
  };

  const getSortDirection = (key) => {
    if (sortConfig.key === key) {
      return sortConfig.direction === 'ascending' ? ' ↑' : ' ↓';
    }
    return '';
  };

  // Calculate pagination
  const totalPages = Math.ceil(sortedData.length / pageSize);
  const startIndex = (currentPage - 1) * pageSize;
  const endIndex = startIndex + pageSize;
  const paginatedData = sortedData.slice(startIndex, endIndex);

  // Page navigation handlers
  const goToPreviousPage = () => {
    setCurrentPage((page) => Math.max(page - 1, 1));
  };

  const goToNextPage = () => {
    setCurrentPage((page) => Math.min(page + 1, totalPages));
  };

  const handlePageSizeChange = (e) => {
    const newSize = parseInt(e.target.value, 10);
    setPageSize(newSize);
    setCurrentPage(1); // Reset to first page when changing page size
  };

  return (
    <div className="relative">
      <Card>
        <div className="flex items-center justify-between p-4">
          <h3 className="text-lg font-semibold">Cluster Jobs</h3>
          {loading && (
            <div className="flex items-center mr-2">
              <CircularProgress size={15} className="mt-0" />
              <span className="ml-2 text-gray-500 text-sm">Loading...</span>
            </div>
          )}
        </div>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead
                className="sortable whitespace-nowrap"
                onClick={() => requestSort('id')}
              >
                ID{getSortDirection('id')}
              </TableHead>
              <TableHead
                className="sortable whitespace-nowrap"
                onClick={() => requestSort('job')}
              >
                Name{getSortDirection('job')}
              </TableHead>
              <TableHead
                className="sortable whitespace-nowrap"
                onClick={() => requestSort('user')}
              >
                User{getSortDirection('user')}
              </TableHead>
              <TableHead
                className="sortable whitespace-nowrap"
                onClick={() => requestSort('submitted_at')}
              >
                Submitted{getSortDirection('submitted_at')}
              </TableHead>
              <TableHead
                className="sortable whitespace-nowrap"
                onClick={() => requestSort('job_duration')}
              >
                Duration{getSortDirection('job_duration')}
              </TableHead>
              <TableHead
                className="sortable whitespace-nowrap"
                onClick={() => requestSort('status')}
              >
                Status{getSortDirection('status')}
              </TableHead>
              <TableHead
                className="sortable whitespace-nowrap"
                onClick={() => requestSort('resources')}
              >
                Resources{getSortDirection('resources')}
              </TableHead>
              <TableHead className="whitespace-nowrap">Logs</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {loading ? (
              <TableRow>
                <TableCell
                  colSpan={7}
                  className="text-center py-6 text-gray-500"
                >
                  <div className="flex justify-center items-center">
                    <CircularProgress size={20} className="mr-2" />
                    <span>Loading...</span>
                  </div>
                </TableCell>
              </TableRow>
            ) : paginatedData.length > 0 ? (
              paginatedData.map((item) => (
                <React.Fragment key={item.id}>
                  <TableRow
                    className={expandedRowId === item.id ? 'selected-row' : ''}
                  >
                    <TableCell>
                      <Link
                        href={`/clusters/${clusterName}/${item.id}`}
                        className="text-blue-600"
                      >
                        {item.id}
                      </Link>
                    </TableCell>
                    <TableCell>
                      <Link
                        href={`/clusters/${clusterName}/${item.id}`}
                        className="text-blue-600"
                      >
                        <TruncatedDetails
                          text={item.job || 'Unnamed job'}
                          rowId={item.id}
                          expandedRowId={expandedRowId}
                          setExpandedRowId={setExpandedRowId}
                        />
                      </Link>
                    </TableCell>
                    <TableCell>{item.user}</TableCell>
                    <TableCell>{relativeTime(item.submitted_at)}</TableCell>
                    <TableCell>{formatDuration(item.job_duration)}</TableCell>
                    <TableCell>
                      <Status2Icon status={item.status} />
                    </TableCell>
                    <TableCell>{item.resources}</TableCell>
                    <TableCell className="flex content-center items-center">
                      <Status2Actions
                        jobParent={`/clusters/${clusterName}`}
                        jobId={item.id}
                        jobName={item.job}
                        status={item.status}
                        managed={false}
                        cluster={clusterName}
                      />
                    </TableCell>
                  </TableRow>
                  {expandedRowId === item.id && (
                    <ExpandedDetailsRow
                      text={item.job || 'Unnamed job'}
                      colSpan={7}
                      innerRef={expandedRowRef}
                    />
                  )}
                </React.Fragment>
              ))
            ) : (
              <TableRow>
                <TableCell
                  colSpan={7}
                  className="text-center py-6 text-gray-500"
                >
                  No jobs found
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </Card>

      {sortedData.length > 0 && (
        <div className="flex justify-end items-center py-2 px-4 text-sm text-gray-700">
          <div className="flex items-center space-x-4">
            <div className="flex items-center">
              <span className="mr-2">Rows per page:</span>
              <div className="relative inline-block">
                <select
                  value={pageSize}
                  onChange={handlePageSizeChange}
                  className="py-1 pl-2 pr-6 appearance-none outline-none cursor-pointer border-none bg-transparent"
                  style={{ minWidth: '40px' }}
                >
                  <option value={5}>5</option>
                  <option value={10}>10</option>
                  <option value={20}>20</option>
                  <option value={50}>50</option>
                </select>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-4 w-4 text-gray-500 absolute right-0 top-1/2 transform -translate-y-1/2 pointer-events-none"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M19 9l-7 7-7-7"
                  />
                </svg>
              </div>
            </div>
            <div>
              {startIndex + 1} – {Math.min(endIndex, sortedData.length)} of{' '}
              {sortedData.length}
            </div>
            <div className="flex items-center space-x-2">
              <Button
                variant="ghost"
                size="icon"
                onClick={goToPreviousPage}
                disabled={currentPage === 1}
                className="text-gray-500 h-8 w-8 p-0"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  className="chevron-left"
                >
                  <path d="M15 18l-6-6 6-6" />
                </svg>
              </Button>
              <Button
                variant="ghost"
                size="icon"
                onClick={goToNextPage}
                disabled={currentPage === totalPages || totalPages === 0}
                className="text-gray-500 h-8 w-8 p-0"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  className="chevron-right"
                >
                  <path d="M9 18l6-6-6-6" />
                </svg>
              </Button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

function ExpandedDetailsRow({ text, colSpan, innerRef }) {
  return (
    <TableRow className="expanded-details">
      <TableCell colSpan={colSpan}>
        <div
          className="p-4 bg-gray-50 rounded-md border border-gray-200"
          ref={innerRef}
        >
          <div className="flex justify-between items-start">
            <div className="flex-1">
              <p className="text-sm font-medium text-gray-900">Full Details</p>
              <p
                className="mt-1 text-sm text-gray-700"
                style={{ whiteSpace: 'pre-wrap' }}
              >
                {text}
              </p>
            </div>
          </div>
        </div>
      </TableCell>
    </TableRow>
  );
}

function TruncatedDetails({ text, rowId, expandedRowId, setExpandedRowId }) {
  const isTruncated = text.length > 50;
  const isExpanded = expandedRowId === rowId;
  // Always show truncated text in the table cell
  const displayText = isTruncated ? `${text.substring(0, 50)}` : text;
  const buttonRef = useRef(null);

  const handleClick = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setExpandedRowId(isExpanded ? null : rowId);
  };

  return (
    <div className="truncated-details relative max-w-full flex items-center">
      <span className="truncate">{displayText}</span>
      {isTruncated && (
        <button
          ref={buttonRef}
          type="button"
          onClick={handleClick}
          className="text-blue-600 hover:text-blue-800 font-medium ml-1 flex-shrink-0"
          data-button-type="show-more-less"
        >
          {isExpanded ? "... show less" : "... show more"}
        </button>
      )}
    </div>
  );
}
