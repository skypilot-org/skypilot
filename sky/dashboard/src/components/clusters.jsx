/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/t5SMh01qKCm
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */
'use client';

import React, {
  useState,
  useEffect,
  useMemo,
  useCallback,
  useRef,
} from 'react';
import { useRouter } from 'next/router';
import { CircularProgress } from '@mui/material';
import {
  CustomTooltip as Tooltip,
  NonCapitalizedTooltip,
  REFRESH_INTERVAL,
  TimestampWithTooltip,
} from '@/components/utils';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import {
  Table,
  TableHeader,
  TableRow,
  TableHead,
  TableBody,
  TableCell,
} from '@/components/ui/table';
import { getClusters, getClusterHistory } from '@/data/connectors/clusters';
import { getWorkspaces } from '@/data/connectors/workspaces';
import { getUsers } from '@/data/connectors/users';
import { sortData } from '@/data/utils';
import { SquareCode, Terminal, RotateCwIcon, Brackets } from 'lucide-react';
import { relativeTime } from '@/components/utils';
import { Layout } from '@/components/elements/layout';
import {
  SSHInstructionsModal,
  VSCodeInstructionsModal,
} from '@/components/elements/modals';
import { StatusBadge } from '@/components/elements/StatusBadge';
import { useMobile } from '@/hooks/useMobile';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import dashboardCache from '@/lib/cache';
import cachePreloader from '@/lib/cache-preloader';
import { ChevronDownIcon, ChevronRightIcon } from 'lucide-react';
import yaml from 'js-yaml';
import { UserDisplay } from '@/components/elements/UserDisplay';

// Helper function to format cost (copied from workspaces.jsx)
// const formatCost = (cost) => { // Cost function removed
//   if (cost >= 10) {
//     // Use the user-updated threshold of 10
//     return cost.toFixed(1);
//   }
//   return cost.toFixed(2);
// };

// Define filter options for the filter dropdown
const PROPERTY_OPTIONS = [
  {
    label: 'Status',
    value: 'status',
  },
  {
    label: 'Cluster',
    value: 'cluster',
  },
  {
    label: 'User',
    value: 'user',
  },
  {
    label: 'Workspace',
    value: 'workspace',
  },
  {
    label: 'Infra',
    value: 'infra',
  },
];

// Helper function to format autostop information, similar to _get_autostop in CLI utils
const formatAutostop = (autostop, toDown) => {
  let autostopStr = '';
  let separation = '';

  if (autostop >= 0) {
    autostopStr = autostop + 'm';
    separation = ' ';
  }

  if (toDown) {
    autostopStr += `${separation}(down)`;
  }

  if (autostopStr === '') {
    autostopStr = '-';
  }

  return autostopStr;
};

// Helper function to format username for display (reuse from users.jsx)
const formatUserDisplay = (username, userId) => {
  if (username && username.includes('@')) {
    const emailPrefix = username.split('@')[0];
    // Show email prefix with userId if they're different
    if (userId && userId !== emailPrefix) {
      return `${emailPrefix} (${userId})`;
    }
    return emailPrefix;
  }
  // If no email, show username with userId in parentheses only if they're different
  const usernameBase = username || userId || 'N/A';

  // Skip showing userId if it's the same as username
  if (userId && userId !== usernameBase) {
    return `${usernameBase} (${userId})`;
  }

  return usernameBase;
};

// Helper function to format duration in a human-readable way
const formatDuration = (durationSeconds) => {
  if (!durationSeconds || durationSeconds === 0) {
    return '-';
  }

  // Convert to a whole number if it's a float
  durationSeconds = Math.floor(durationSeconds);

  const units = [
    { value: 31536000, label: 'y' }, // years (365 days)
    { value: 2592000, label: 'mo' }, // months (30 days)
    { value: 86400, label: 'd' }, // days
    { value: 3600, label: 'h' }, // hours
    { value: 60, label: 'm' }, // minutes
    { value: 1, label: 's' }, // seconds
  ];

  let remaining = durationSeconds;
  let result = '';
  let count = 0;

  for (const unit of units) {
    if (remaining >= unit.value && count < 2) {
      const value = Math.floor(remaining / unit.value);
      result += `${value}${unit.label} `;
      remaining %= unit.value;
      count++;
    }
  }

  return result.trim() || '0s';
};

export function Clusters() {
  const router = useRouter();
  const [loading, setLoading] = useState(false);
  const refreshDataRef = React.useRef(null);
  const [isSSHModalOpen, setIsSSHModalOpen] = useState(false);
  const [isVSCodeModalOpen, setIsVSCodeModalOpen] = useState(false);
  const [selectedCluster, setSelectedCluster] = useState(null);
  const [showHistory, setShowHistory] = useState(false); // 'active' or 'history'
  const isMobile = useMobile();

  const [filters, setFilters] = useState([]);
  const [optionValues, setOptionValues] = useState({
    status: [],
    cluster: [],
    user: [],
    workspace: [],
    infra: [],
  }); /// Option values for properties

  // Handle URL query parameters for workspace and user filtering
  useEffect(() => {
    if (router.isReady) {
      updateFiltersByURLParams();
    }
  }, [router.isReady]);

  useEffect(() => {
    const fetchFilterData = async () => {
      try {
        // Trigger cache preloading for clusters page and background preload other pages
        await cachePreloader.preloadForPage('clusters');

        // Fetch configured workspaces for the filter dropdown
        const fetchedWorkspacesConfig = await dashboardCache.get(getWorkspaces);
        const configuredWorkspaceNames = Object.keys(fetchedWorkspacesConfig);

        // Fetch all clusters to see if 'default' workspace is implicitly used
        const allClusters = await dashboardCache.get(getClusters);
        const uniqueClusterWorkspaces = [
          ...new Set(
            allClusters
              .map((cluster) => cluster.workspace || 'default')
              .filter((ws) => ws)
          ),
        ];

        // Combine configured workspaces with any actively used 'default' workspace
        const finalWorkspaces = new Set(configuredWorkspaceNames);
        if (
          uniqueClusterWorkspaces.includes('default') &&
          !finalWorkspaces.has('default')
        ) {
          // Add 'default' if it's used by clusters but not in configured list
          // This ensures 'default' appears if relevant, even if not explicitly in skypilot config
        }
        // Ensure all unique cluster workspaces are in the list, especially 'default'
        uniqueClusterWorkspaces.forEach((wsName) =>
          finalWorkspaces.add(wsName)
        );

        // Fetch users for the filter dropdown
        const fetchedUsers = await dashboardCache.get(getUsers);
        const uniqueClusterUsers = [
          ...new Set(
            allClusters
              .map((cluster) => ({
                userId: cluster.user_hash || cluster.user,
                username: cluster.user,
              }))
              .filter((user) => user.userId)
          ).values(),
        ];

        // Combine fetched users with unique cluster users
        const finalUsers = new Map();

        // Add fetched users first
        fetchedUsers.forEach((user) => {
          finalUsers.set(user.userId, {
            userId: user.userId,
            username: user.username,
            display: formatUserDisplay(user.username, user.userId),
          });
        });

        // Add any cluster users not in the fetched list
        uniqueClusterUsers.forEach((user) => {
          if (!finalUsers.has(user.userId)) {
            finalUsers.set(user.userId, {
              userId: user.userId,
              username: user.username,
              display: formatUserDisplay(user.username, user.userId),
            });
          }
        });
      } catch (error) {
        console.error('Error fetching data for filters:', error);
      }
    };

    fetchFilterData();
  }, []);

  // Helper function to update URL query parameters
  const updateURLParams = (filters) => {
    const query = { ...router.query };

    let properties = [];
    let operators = [];
    let values = [];

    filters.map((filter, _index) => {
      properties.push(filter.property.toLowerCase() ?? '');
      operators.push(filter.operator);
      values.push(filter.value);
    });

    query.property = properties;
    query.operator = operators;
    query.value = values;

    // Use replace to avoid adding to browser history for filter changes
    router.replace(
      {
        pathname: router.pathname,
        query,
      },
      undefined,
      { shallow: true }
    );
  };

  const updateFiltersByURLParams = () => {
    const query = { ...router.query };

    const properties = query.property;
    const operators = query.operator;
    const values = query.value;

    if (properties === undefined) {
      return;
    }

    let filters = [];

    const length = Array.isArray(properties) ? properties.length : 1;

    const propertyMap = new Map();
    propertyMap.set('', '');
    propertyMap.set('status', 'Status');
    propertyMap.set('cluster', 'Cluster');
    propertyMap.set('user', 'User');
    propertyMap.set('workspace', 'Workspace');
    propertyMap.set('infra', 'Infra');

    if (length === 1) {
      filters.push({
        property: propertyMap.get(properties),
        operator: operators,
        value: values,
      });
    } else {
      for (let i = 0; i < length; i++) {
        filters.push({
          property: propertyMap.get(properties[i]),
          operator: operators[i],
          value: values[i],
        });
      }
    }

    setFilters(filters);
  };

  const handleRefresh = () => {
    // Invalidate cache to ensure fresh data is fetched
    dashboardCache.invalidate(getClusters);
    dashboardCache.invalidate(getClusterHistory);
    dashboardCache.invalidate(getWorkspaces);
    dashboardCache.invalidate(getUsers);

    if (refreshDataRef.current) {
      refreshDataRef.current();
    }
  };

  return (
    <>
      <div className="flex items-center justify-between mb-2 h-5">
        <div className="text-base flex items-center">
          <Link
            href="/clusters"
            className="text-sky-blue hover:underline leading-none"
          >
            Sky Clusters
          </Link>

          <FilterDropdown
            propertyList={PROPERTY_OPTIONS}
            valueList={optionValues}
            setFilters={setFilters}
            updateURLParams={updateURLParams}
            placeholder="Filter clusters"
          />
        </div>
        <div className="flex items-center space-x-4">
          <div className="flex items-center">
            <label className="flex items-center cursor-pointer">
              <input
                type="checkbox"
                checked={showHistory}
                onChange={(e) => setShowHistory(e.target.checked)}
                className="sr-only"
              />
              <div
                className={`relative inline-flex h-5 w-9 items-center rounded-full transition-colors ${
                  showHistory ? 'bg-sky-600' : 'bg-gray-300'
                }`}
              >
                <span
                  className={`inline-block h-3 w-3 transform rounded-full bg-white transition-transform ${
                    showHistory ? 'translate-x-5' : 'translate-x-1'
                  }`}
                />
              </div>
              <span className="ml-2 text-sm text-gray-700">
                Show history (Last 30 days)
              </span>
            </label>
          </div>
          <div className="flex items-center">
            {loading && (
              <div className="flex items-center mr-2">
                <CircularProgress size={15} className="mt-0" />
                <span className="ml-2 text-gray-500">Loading...</span>
              </div>
            )}
            <button
              onClick={handleRefresh}
              disabled={loading}
              className="text-sky-blue hover:text-sky-blue-bright flex items-center"
            >
              <RotateCwIcon className="h-4 w-4 mr-1.5" />
              {!isMobile && <span>Refresh</span>}
            </button>
          </div>
        </div>
      </div>

      <Filters
        filters={filters}
        setFilters={setFilters}
        updateURLParams={updateURLParams}
      />

      <ClusterTable
        refreshInterval={REFRESH_INTERVAL}
        setLoading={setLoading}
        refreshDataRef={refreshDataRef}
        filters={filters}
        showHistory={showHistory}
        onOpenSSHModal={(cluster) => {
          setSelectedCluster(cluster);
          setIsSSHModalOpen(true);
        }}
        onOpenVSCodeModal={(cluster) => {
          setSelectedCluster(cluster);
          setIsVSCodeModalOpen(true);
        }}
        setOptionValues={setOptionValues}
      />

      {/* SSH Instructions Modal */}
      <SSHInstructionsModal
        isOpen={isSSHModalOpen}
        onClose={() => setIsSSHModalOpen(false)}
        cluster={selectedCluster}
      />

      <VSCodeInstructionsModal
        isOpen={isVSCodeModalOpen}
        onClose={() => setIsVSCodeModalOpen(false)}
        cluster={selectedCluster}
      />
    </>
  );
}

export function ClusterTable({
  refreshInterval,
  setLoading,
  refreshDataRef,
  filters,
  showHistory,
  onOpenSSHModal,
  onOpenVSCodeModal,
  setOptionValues,
}) {
  const [data, setData] = useState([]);
  const [sortConfig, setSortConfig] = useState({
    key: null,
    direction: 'ascending',
  });
  const [loading, setLocalLoading] = useState(false);
  const [isInitialLoad, setIsInitialLoad] = useState(true);
  const [currentPage, setCurrentPage] = useState(1);
  const [pageSize, setPageSize] = useState(10);

  const fetchOptionValuesFromClusters = (clusters) => {
    let optionValues = {
      status: [],
      cluster: [],
      user: [],
      workspace: [],
      infra: [],
    };

    const pushWithoutDuplication = (array, item) => {
      if (array.includes(item)) return;

      array.push(item);
    };

    clusters.map((cluster) => {
      pushWithoutDuplication(optionValues.status, cluster.status);
      pushWithoutDuplication(optionValues.cluster, cluster.cluster);
      pushWithoutDuplication(optionValues.user, cluster.user);
      pushWithoutDuplication(optionValues.workspace, cluster.workspace);
      pushWithoutDuplication(optionValues.infra, cluster.infra);
    });

    return optionValues;
  };

  const fetchData = React.useCallback(async () => {
    setLoading(true);
    setLocalLoading(true);

    try {
      const activeClusters = await dashboardCache.get(getClusters);

      if (showHistory) {
        const historyClusters = await dashboardCache.get(getClusterHistory);
        // Mark clusters as active or historical for UI distinction
        const markedActiveClusters = activeClusters.map((cluster) => ({
          ...cluster,
          isHistorical: false,
        }));
        const markedHistoryClusters = historyClusters.map((cluster) => ({
          ...cluster,
          isHistorical: true,
        }));
        // Combine and remove duplicates (prefer active over historical)
        const combinedData = [...markedActiveClusters];
        markedHistoryClusters.forEach((histCluster) => {
          const existsInActive = activeClusters.some(
            (activeCluster) =>
              (activeCluster.cluster || activeCluster.name) ===
              (histCluster.cluster || histCluster.name)
          );
          if (!existsInActive) {
            combinedData.push(histCluster);
          }
        });

        setOptionValues(fetchOptionValuesFromClusters(combinedData));

        setData(combinedData);
      } else {
        // Mark active clusters for consistency
        const markedActiveClusters = activeClusters.map((cluster) => ({
          ...cluster,
          isHistorical: false,
        }));

        setOptionValues(fetchOptionValuesFromClusters(markedActiveClusters));

        setData(markedActiveClusters);
      }
    } catch (error) {
      console.error('Error fetching cluster data:', error);
      setOptionValues(fetchOptionValuesFromClusters([]));
      setData([]);
    }

    setLoading(false);
    setLocalLoading(false);
    setIsInitialLoad(false);
  }, [setLoading, showHistory]);

  // Utility: checks a condition based on operator
  const evaluateCondition = (item, filter) => {
    const { property, operator, value } = filter;

    if (!value) return true; // skip empty filters

    // Global search: check all values
    if (!property) {
      const strValue = value.toLowerCase();
      return Object.values(item).some((val) =>
        val?.toString().toLowerCase().includes(strValue)
      );
    }

    const itemValue = item[property.toLowerCase()]?.toString().toLowerCase();
    const filterValue = value.toString().toLowerCase();

    switch (operator) {
      case '=':
        return itemValue === filterValue;
      case ':':
        return itemValue?.includes(filterValue);
      default:
        return true;
    }
  };

  // Use useMemo to compute sorted data
  const sortedData = React.useMemo(() => {
    // Main filter function
    const filterData = (data, filters) => {
      if (filters.length === 0) {
        return data;
      }

      return data.filter((item) => {
        let result = null;

        for (let i = 0; i < filters.length; i++) {
          const filter = filters[i];
          const current = evaluateCondition(item, filter);

          if (result === null) {
            result = current;
          } else {
            result = result && current;
          }
        }

        return result;
      });
    };

    const filteredData = filterData(data, filters);

    return sortData(filteredData, sortConfig.key, sortConfig.direction);
  }, [data, sortConfig, filters]);

  // Expose fetchData to parent component
  React.useEffect(() => {
    if (refreshDataRef) {
      refreshDataRef.current = fetchData;
    }
  }, [refreshDataRef, fetchData]);

  useEffect(() => {
    setData([]);
    let isCurrent = true;

    fetchData();

    const interval = setInterval(() => {
      if (isCurrent) {
        fetchData();
      }
    }, refreshInterval);

    return () => {
      isCurrent = false;
      clearInterval(interval);
    };
  }, [refreshInterval, fetchData]);

  // Reset to first page when data changes
  useEffect(() => {
    setCurrentPage(1);
  }, [data.length]);

  const requestSort = (key) => {
    let direction = 'ascending';
    if (sortConfig.key === key && sortConfig.direction === 'ascending') {
      direction = 'descending';
    }
    setSortConfig({ key, direction });
  };

  const getSortDirection = (key) => {
    if (sortConfig.key === key) {
      return sortConfig.direction === 'ascending' ? ' ↑' : ' ↓';
    }
    return '';
  };

  // Calculate pagination using sortedData
  const totalPages = Math.ceil(sortedData.length / pageSize);
  const startIndex = (currentPage - 1) * pageSize;
  const endIndex = startIndex + pageSize;
  const paginatedData = sortedData.slice(startIndex, endIndex);

  // Page navigation handlers
  const goToPreviousPage = () => {
    setCurrentPage((page) => Math.max(page - 1, 1));
  };

  const goToNextPage = () => {
    setCurrentPage((page) => Math.min(page + 1, totalPages));
  };

  const handlePageSizeChange = (e) => {
    const newSize = parseInt(e.target.value, 10);
    setPageSize(newSize);
    setCurrentPage(1); // Reset to first page when changing page size
  };

  return (
    <div>
      <Card>
        <div className="overflow-x-auto rounded-lg">
          <Table className="min-w-full">
            <TableHeader>
              <TableRow>
                <TableHead
                  className="sortable whitespace-nowrap"
                  onClick={() => requestSort('status')}
                >
                  Status{getSortDirection('status')}
                </TableHead>
                <TableHead
                  className="sortable whitespace-nowrap"
                  onClick={() => requestSort('cluster')}
                >
                  Cluster{getSortDirection('cluster')}
                </TableHead>
                <TableHead
                  className="sortable whitespace-nowrap hidden sm:table-cell"
                  onClick={() => requestSort('user')}
                >
                  User{getSortDirection('user')}
                </TableHead>
                <TableHead
                  className="sortable whitespace-nowrap hidden md:table-cell"
                  onClick={() => requestSort('workspace')}
                >
                  Workspace{getSortDirection('workspace')}
                </TableHead>
                <TableHead
                  className="sortable whitespace-nowrap hidden lg:table-cell"
                  onClick={() => requestSort('infra')}
                >
                  Infra{getSortDirection('infra')}
                </TableHead>
                <TableHead
                  className="sortable whitespace-nowrap hidden xl:table-cell"
                  onClick={() => requestSort('resources_str')}
                >
                  Resources{getSortDirection('resources_str')}
                </TableHead>
                <TableHead
                  className="sortable whitespace-nowrap"
                  onClick={() => requestSort('time')}
                >
                  Started{getSortDirection('time')}
                </TableHead>
                {showHistory && (
                  <TableHead
                    className="sortable whitespace-nowrap hidden lg:table-cell"
                    onClick={() => requestSort('duration')}
                  >
                    Duration{getSortDirection('duration')}
                  </TableHead>
                )}
                <TableHead
                  className="sortable whitespace-nowrap hidden md:table-cell"
                  onClick={() => requestSort('autostop')}
                >
                  Autostop{getSortDirection('autostop')}
                </TableHead>
                <TableHead className="sticky right-0 bg-white">
                  Actions
                </TableHead>
              </TableRow>
            </TableHeader>

            <TableBody>
              {loading && isInitialLoad ? (
                <TableRow>
                  <TableCell
                    colSpan={9}
                    className="text-center py-6 text-gray-500"
                  >
                    <div className="flex justify-center items-center">
                      <CircularProgress size={20} className="mr-2" />
                      <span>Loading...</span>
                    </div>
                  </TableCell>
                </TableRow>
              ) : paginatedData.length > 0 ? (
                paginatedData.map((item, index) => {
                  return (
                    <TableRow key={index}>
                      <TableCell>
                        <StatusBadge status={item.status} />
                      </TableCell>
                      <TableCell>
                        <Link
                          href={`/clusters/${item.isHistorical ? item.cluster_hash : item.cluster || item.name}`}
                          className="text-blue-600"
                        >
                          {item.cluster || item.name}
                        </Link>
                      </TableCell>
                      <TableCell className="hidden sm:table-cell">
                        <UserDisplay
                          username={item.user}
                          userHash={item.user_hash}
                        />
                      </TableCell>
                      <TableCell className="hidden md:table-cell">
                        <Link
                          href="/workspaces"
                          className="text-gray-700 hover:text-blue-600 hover:underline"
                        >
                          {item.workspace || 'default'}
                        </Link>
                      </TableCell>
                      <TableCell className="hidden lg:table-cell">
                        <NonCapitalizedTooltip
                          content={item.full_infra || item.infra}
                          className="text-sm text-muted-foreground"
                        >
                          <span>
                            <Link
                              href="/infra"
                              className="text-blue-600 hover:underline"
                            >
                              {item.cloud}
                            </Link>
                            {item.infra.includes('(') && (
                              <span>
                                {' ' +
                                  item.infra.substring(item.infra.indexOf('('))}
                              </span>
                            )}
                          </span>
                        </NonCapitalizedTooltip>
                      </TableCell>
                      <TableCell className="hidden xl:table-cell">
                        <NonCapitalizedTooltip
                          content={
                            item.resources_str_full || item.resources_str
                          }
                          className="text-sm text-muted-foreground"
                        >
                          <span>{item.resources_str}</span>
                        </NonCapitalizedTooltip>
                      </TableCell>
                      <TableCell>
                        <TimestampWithTooltip date={item.time} />
                      </TableCell>
                      {showHistory && (
                        <TableCell className="hidden lg:table-cell">
                          {formatDuration(item.duration)}
                        </TableCell>
                      )}
                      <TableCell className="hidden md:table-cell">
                        {item.isHistorical
                          ? '-'
                          : formatAutostop(item.autostop, item.to_down)}
                      </TableCell>
                      <TableCell className="text-left sticky right-0 bg-white">
                        {!item.isHistorical && (
                          <Status2Actions
                            cluster={item.cluster}
                            status={item.status}
                            onOpenSSHModal={onOpenSSHModal}
                            onOpenVSCodeModal={onOpenVSCodeModal}
                          />
                        )}
                      </TableCell>
                    </TableRow>
                  );
                })
              ) : (
                <TableRow>
                  <TableCell
                    colSpan={9}
                    className="text-center py-6 text-gray-500"
                  >
                    {showHistory ? 'No clusters found' : 'No active clusters'}
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </div>
      </Card>

      {/* Pagination controls */}
      {data.length > 0 && (
        <div className="flex justify-end items-center py-2 px-4 text-sm text-gray-700">
          <div className="flex items-center space-x-4">
            <div className="flex items-center">
              <span className="mr-2">Rows per page:</span>
              <div className="relative inline-block">
                <select
                  value={pageSize}
                  onChange={handlePageSizeChange}
                  className="py-1 pl-2 pr-6 appearance-none outline-none cursor-pointer border-none bg-transparent"
                  style={{ minWidth: '40px' }}
                >
                  <option value={10}>10</option>
                  <option value={30}>30</option>
                  <option value={50}>50</option>
                  <option value={100}>100</option>
                  <option value={200}>200</option>
                </select>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-4 w-4 text-gray-500 absolute right-0 top-1/2 transform -translate-y-1/2 pointer-events-none"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M19 9l-7 7-7-7"
                  />
                </svg>
              </div>
            </div>
            <div>
              {`${startIndex + 1} - ${Math.min(endIndex, sortedData.length)} of ${sortedData.length}`}
            </div>
            <div className="flex items-center space-x-2">
              <Button
                variant="ghost"
                size="icon"
                onClick={goToPreviousPage}
                disabled={currentPage === 1}
                className="text-gray-500 h-8 w-8 p-0"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  className="chevron-left"
                >
                  <path d="M15 18l-6-6 6-6" />
                </svg>
              </Button>
              <Button
                variant="ghost"
                size="icon"
                onClick={goToNextPage}
                disabled={currentPage === totalPages || totalPages === 0}
                className="text-gray-500 h-8 w-8 p-0"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  className="chevron-right"
                >
                  <path d="M9 18l6-6-6-6" />
                </svg>
              </Button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export const handleVSCodeConnection = (cluster, onOpenVSCodeModal) => {
  if (onOpenVSCodeModal) {
    onOpenVSCodeModal(cluster);
  }
};

const handleConnect = (cluster, onOpenSSHModal) => {
  if (onOpenSSHModal) {
    onOpenSSHModal(cluster);
  } else {
    const uri = `ssh://${cluster}`;
    window.open(uri);
  }
};

// TODO(hailong): The enabled actions are also related to the `cloud` of the cluster
export const enabledActions = (status) => {
  switch (status) {
    case 'RUNNING':
      return ['connect', 'VSCode'];
    default:
      return [];
  }
};

const actionIcons = {
  connect: <Terminal className="w-4 h-4 text-gray-500 inline-block" />,
  VSCode: <SquareCode className="w-4 h-4 text-gray-500 inline-block" />,
};

export function Status2Actions({
  withLabel = false,
  cluster,
  status,
  onOpenSSHModal,
  onOpenVSCodeModal,
}) {
  const actions = enabledActions(status);
  const isMobile = useMobile();

  const handleActionClick = (actionName) => {
    switch (actionName) {
      case 'connect':
        handleConnect(cluster, onOpenSSHModal);
        break;
      case 'VSCode':
        handleVSCodeConnection(cluster, onOpenVSCodeModal);
        break;
      default:
        return;
    }
  };

  return (
    <>
      <div className="flex items-center space-x-4">
        {Object.entries(actionIcons).map(([actionName, actionIcon]) => {
          let label, tooltipText;
          switch (actionName) {
            case 'connect':
              label = 'Connect';
              tooltipText = 'Connect with SSH';
              break;
            case 'VSCode':
              label = 'VSCode';
              tooltipText = 'Open in VS Code';
              break;
            default:
              break;
          }
          if (!withLabel) {
            label = '';
          }
          if (actions.includes(actionName)) {
            return (
              <Tooltip
                key={actionName}
                content={tooltipText}
                className="capitalize text-sm text-muted-foreground"
              >
                <button
                  onClick={() => handleActionClick(actionName)}
                  className="text-sky-blue hover:text-sky-blue-bright font-medium inline-flex items-center"
                >
                  {actionIcon}
                  {!isMobile && <span className="ml-1.5">{label}</span>}
                </button>
              </Tooltip>
            );
          }
          return (
            <Tooltip
              key={actionName}
              content={tooltipText}
              className="capitalize text-sm text-muted-foreground"
            >
              <span
                className="opacity-30 flex items-center cursor-not-allowed text-sm"
                title={actionName}
              >
                {actionIcon}
                {!isMobile && <span className="ml-1.5">{label}</span>}
              </span>
            </Tooltip>
          );
        })}
      </div>
    </>
  );
}

const FilterDropdown = ({
  propertyList = [],
  valueList,
  setFilters,
  updateURLParams,
  placeholder = 'Filter clusters',
}) => {
  const inputRef = useRef(null);
  const dropdownRef = useRef(null);

  const [isOpen, setIsOpen] = useState(false);
  const [value, setValue] = useState('');
  const [propertyValue, setPropertValue] = useState('status');
  const [valueOptions, setValueOptions] = useState([]);

  // Handle clicks outside the dropdown
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (
        dropdownRef.current &&
        !dropdownRef.current.contains(event.target) &&
        inputRef.current &&
        !inputRef.current.contains(event.target)
      ) {
        setIsOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  useEffect(() => {
    let updatedValueOptions = [];

    if (valueList && typeof valueList === 'object') {
      switch (propertyValue) {
        case 'status':
          updatedValueOptions = valueList.status || [];
          break;
        case 'user':
          updatedValueOptions = valueList.user || [];
          break;
        case 'cluster':
          updatedValueOptions = valueList.cluster || [];
          break;
        case 'workspace':
          updatedValueOptions = valueList.workspace || [];
          break;
        case 'infra':
          updatedValueOptions = valueList.infra || [];
          break;
        default:
          break;
      }
    }

    // Filter options based on current input value
    if (value.trim() !== '') {
      updatedValueOptions = updatedValueOptions.filter(
        (item) =>
          item && item.toString().toLowerCase().includes(value.toLowerCase())
      );
    }

    setValueOptions(updatedValueOptions);
  }, [propertyValue, valueList, value]);

  // Helper function to get the capitalized label for a property value
  const getPropertyLabel = (propertyValue) => {
    const propertyItem = propertyList.find(
      (item) => item.value === propertyValue
    );
    return propertyItem ? propertyItem.label : propertyValue;
  };

  const handleValueChange = (e) => {
    setValue(e.target.value);
    if (!isOpen) {
      setIsOpen(true);
    }
  };

  const handleInputFocus = () => {
    setIsOpen(true);
  };

  const handleOptionSelect = (option) => {
    setFilters((prevFilters) => {
      const updatedFilters = [
        ...prevFilters,
        {
          property: getPropertyLabel(propertyValue),
          operator: ':',
          value: option,
        },
      ];

      updateURLParams(updatedFilters);
      return updatedFilters;
    });
    setIsOpen(false);
    setValue('');
    inputRef.current.focus();
  };

  const handleKeyDown = (e) => {
    if (e.key === 'Enter' && value.trim() !== '') {
      setFilters((prevFilters) => {
        const updatedFilters = [
          ...prevFilters,
          {
            property: getPropertyLabel(propertyValue),
            operator: ':',
            value: value,
          },
        ];

        updateURLParams(updatedFilters);
        return updatedFilters;
      });
      setValue('');
      setIsOpen(false);
    } else if (e.key === 'Escape') {
      setIsOpen(false);
      inputRef.current.blur();
    }
  };

  return (
    <div className="flex flex-row ml-4 mr-2 border border-gray-300 rounded-md overflow-visible">
      <div className="border-r border-gray-300">
        <Select onValueChange={setPropertValue} value={propertyValue}>
          <SelectTrigger
            aria-label="Filter Property"
            className="focus:ring-0 focus:ring-offset-0 border-none rounded-l-md rounded-r-none w-32 h-8"
          >
            <SelectValue placeholder="Select Property" />
          </SelectTrigger>
          <SelectContent>
            {propertyList.map((item, index) => (
              <SelectItem key={`property-item-${index}`} value={item.value}>
                {item.label}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>
      <div className="relative flex-1">
        <input
          type="text"
          ref={inputRef}
          placeholder={placeholder}
          value={value}
          onChange={handleValueChange}
          onFocus={handleInputFocus}
          onKeyDown={handleKeyDown}
          className="h-8 w-32 sm:w-96 px-3 pr-8 text-sm border-none rounded-l-none rounded-r-md focus:ring-0 focus:outline-none"
          autoComplete="off"
        />
        {value && (
          <button
            onClick={() => {
              setValue('');
              setIsOpen(false);
            }}
            className="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
            title="Clear filter"
            tabIndex={-1}
          >
            <svg
              className="h-4 w-4"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M6 18L18 6M6 6l12 12"
              />
            </svg>
          </button>
        )}
        {isOpen && valueOptions.length > 0 && (
          <div
            ref={dropdownRef}
            className="absolute z-50 mt-1 w-full bg-white border border-gray-200 rounded-md shadow-lg max-h-60 overflow-y-auto"
            style={{ zIndex: 9999 }}
          >
            {valueOptions.map((option, index) => (
              <div
                key={`${option}-${index}`}
                className={`px-3 py-2 cursor-pointer hover:bg-gray-50 text-sm ${
                  index !== valueOptions.length - 1
                    ? 'border-b border-gray-100'
                    : ''
                }`}
                onClick={() => handleOptionSelect(option)}
              >
                <span className="text-sm text-gray-700">{option}</span>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

const Filters = ({ filters = [], setFilters, updateURLParams }) => {
  const onRemove = (index) => {
    setFilters((prevFilters) => {
      const updatedFilters = prevFilters.filter(
        (_, _index) => _index !== index
      );

      updateURLParams(updatedFilters);

      return updatedFilters;
    });
  };

  const clearFilters = () => {
    updateURLParams([]);
    setFilters([]);
  };

  return (
    <>
      <div className="flex items-center gap-4 py-2 px-2">
        <div className="flex flex-wrap items-content gap-2">
          {filters.map((filter, _index) => (
            <FilterItem
              key={`filteritem-${_index}`}
              filter={filter}
              onRemove={() => onRemove(_index)}
            />
          ))}

          {filters.length > 0 && (
            <>
              <button
                onClick={clearFilters}
                className="rounded-full px-4 py-1 text-sm text-gray-700 bg-gray-200 hover:bg-gray-300"
              >
                Clear filters
              </button>
            </>
          )}
        </div>
      </div>
    </>
  );
};

const FilterItem = ({ filter, onRemove }) => {
  return (
    <>
      <div className="flex items-center text-blue-600 bg-blue-100 px-1 py-1 rounded-full text-sm">
        <div className="flex items-center gap-1 px-2">
          <span>{`${filter.property} `}</span>
          <span>{`${filter.operator} `}</span>
          <span>{` ${filter.value}`}</span>
        </div>

        <button
          onClick={() => onRemove()}
          className="p-0.5 ml-1 transform text-gray-400 hover:text-gray-600 bg-blue-500 hover:bg-blue-600 rounded-full flex flex-col items-center"
          title="Clear filter"
        >
          <svg
            className="h-3 w-3"
            fill="none"
            stroke="white"
            viewBox="0 0 24 24"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={5}
              d="M6 18L18 6M6 6l12 12"
            />
          </svg>
        </button>
      </div>
    </>
  );
};
