/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/t5SMh01qKCm
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */
'use client';

import React, {
  useState,
  useEffect,
  useMemo,
  useCallback,
  useRef,
} from 'react';
import { useRouter } from 'next/router';
import { CircularProgress } from '@mui/material';
import {
  CustomTooltip as Tooltip,
  NonCapitalizedTooltip,
  REFRESH_INTERVAL,
} from '@/components/utils';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import {
  Table,
  TableHeader,
  TableRow,
  TableHead,
  TableBody,
  TableCell,
} from '@/components/ui/table';
import { getClusters } from '@/data/connectors/clusters';
import { getWorkspaces } from '@/data/connectors/workspaces';
import { sortData } from '@/data/utils';
import { SquareCode, Terminal, RotateCwIcon } from 'lucide-react';
import { relativeTime } from '@/components/utils';
import { Layout } from '@/components/elements/layout';
import {
  SSHInstructionsModal,
  VSCodeInstructionsModal,
} from '@/components/elements/modals';
import { StatusBadge } from '@/components/elements/StatusBadge';
import { useMobile } from '@/hooks/useMobile';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import dashboardCache from '@/lib/cache';
import cachePreloader from '@/lib/cache-preloader';
import { ChevronDownIcon, ChevronRightIcon } from 'lucide-react';
import yaml from 'js-yaml';

// Helper function to format cost (copied from workspaces.jsx)
// const formatCost = (cost) => { // Cost function removed
//   if (cost >= 10) {
//     // Use the user-updated threshold of 10
//     return cost.toFixed(1);
//   }
//   return cost.toFixed(2);
// };

const ALL_WORKSPACES_VALUE = '__ALL_WORKSPACES__'; // Define constant for "All Workspaces"

// Helper function to format autostop information, similar to _get_autostop in CLI utils
const formatAutostop = (autostop, toDown) => {
  let autostopStr = '';
  let separation = '';

  if (autostop >= 0) {
    autostopStr = autostop + 'm';
    separation = ' ';
  }

  if (toDown) {
    autostopStr += `${separation}(down)`;
  }

  if (autostopStr === '') {
    autostopStr = '-';
  }

  return autostopStr;
};

export function Clusters() {
  const router = useRouter();
  const [loading, setLoading] = useState(false);
  const refreshDataRef = React.useRef(null);
  const [isSSHModalOpen, setIsSSHModalOpen] = useState(false);
  const [isVSCodeModalOpen, setIsVSCodeModalOpen] = useState(false);
  const [selectedCluster, setSelectedCluster] = useState(null);
  const [workspaceFilter, setWorkspaceFilter] = useState(ALL_WORKSPACES_VALUE);
  const [workspaces, setWorkspaces] = useState([]);
  const isMobile = useMobile();

  // Handle URL query parameters for workspace filtering
  useEffect(() => {
    if (router.isReady && router.query.workspace) {
      const workspaceParam = Array.isArray(router.query.workspace)
        ? router.query.workspace[0]
        : router.query.workspace;
      setWorkspaceFilter(workspaceParam);
    }
  }, [router.isReady, router.query.workspace]);

  useEffect(() => {
    const fetchFilterData = async () => {
      try {
        // Trigger cache preloading for clusters page and background preload other pages
        await cachePreloader.preloadForPage('clusters');

        // Fetch configured workspaces for the filter dropdown
        const fetchedWorkspacesConfig = await dashboardCache.get(getWorkspaces);
        const configuredWorkspaceNames = Object.keys(fetchedWorkspacesConfig);

        // Fetch all clusters to see if 'default' workspace is implicitly used
        const allClusters = await dashboardCache.get(getClusters);
        const uniqueClusterWorkspaces = [
          ...new Set(
            allClusters
              .map((cluster) => cluster.workspace || 'default')
              .filter((ws) => ws)
          ),
        ];

        // Combine configured workspaces with any actively used 'default' workspace
        const finalWorkspaces = new Set(configuredWorkspaceNames);
        if (
          uniqueClusterWorkspaces.includes('default') &&
          !finalWorkspaces.has('default')
        ) {
          // Add 'default' if it's used by clusters but not in configured list
          // This ensures 'default' appears if relevant, even if not explicitly in skypilot config
        }
        // Ensure all unique cluster workspaces are in the list, especially 'default'
        uniqueClusterWorkspaces.forEach((wsName) =>
          finalWorkspaces.add(wsName)
        );

        setWorkspaces(Array.from(finalWorkspaces).sort());
      } catch (error) {
        console.error('Error fetching data for workspace filter:', error);
        setWorkspaces(['default']); // Fallback or error state
      }
    };
    fetchFilterData();
  }, []);

  const handleRefresh = () => {
    // Invalidate cache to ensure fresh data is fetched
    dashboardCache.invalidate(getClusters);
    dashboardCache.invalidate(getWorkspaces);

    if (refreshDataRef.current) {
      refreshDataRef.current();
    }
  };

  return (
    <Layout highlighted="clusters">
      <div className="flex items-center justify-between mb-4 h-5">
        <div className="text-base flex items-center">
          <Link
            href="/clusters"
            className="text-sky-blue hover:underline leading-none"
          >
            Sky Clusters
          </Link>
          <Select value={workspaceFilter} onValueChange={setWorkspaceFilter}>
            <SelectTrigger className="h-8 w-48 ml-4 mr-2 text-sm border-none focus:ring-0 focus:outline-none">
              <SelectValue placeholder="Filter by workspace...">
                {workspaceFilter === ALL_WORKSPACES_VALUE
                  ? 'All Workspaces'
                  : workspaceFilter}
              </SelectValue>
            </SelectTrigger>
            <SelectContent>
              <SelectItem value={ALL_WORKSPACES_VALUE}>
                All Workspaces
              </SelectItem>
              {workspaces.map((ws) => (
                <SelectItem key={ws} value={ws}>
                  {ws}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
        <div className="flex items-center">
          {loading && (
            <div className="flex items-center mr-2">
              <CircularProgress size={15} className="mt-0" />
              <span className="ml-2 text-gray-500">Loading...</span>
            </div>
          )}
          <button
            onClick={handleRefresh}
            disabled={loading}
            className="text-sky-blue hover:text-sky-blue-bright flex items-center"
          >
            <RotateCwIcon className="h-4 w-4 mr-1.5" />
            {!isMobile && <span>Refresh</span>}
          </button>
        </div>
      </div>
      <ClusterTable
        refreshInterval={REFRESH_INTERVAL}
        setLoading={setLoading}
        refreshDataRef={refreshDataRef}
        workspaceFilter={workspaceFilter}
        onOpenSSHModal={(cluster) => {
          setSelectedCluster(cluster);
          setIsSSHModalOpen(true);
        }}
        onOpenVSCodeModal={(cluster) => {
          setSelectedCluster(cluster);
          setIsVSCodeModalOpen(true);
        }}
      />

      {/* SSH Instructions Modal */}
      <SSHInstructionsModal
        isOpen={isSSHModalOpen}
        onClose={() => setIsSSHModalOpen(false)}
        cluster={selectedCluster}
      />

      <VSCodeInstructionsModal
        isOpen={isVSCodeModalOpen}
        onClose={() => setIsVSCodeModalOpen(false)}
        cluster={selectedCluster}
      />
    </Layout>
  );
}

export function ClusterTable({
  refreshInterval,
  setLoading,
  refreshDataRef,
  workspaceFilter,
  onOpenSSHModal,
  onOpenVSCodeModal,
}) {
  const [data, setData] = useState([]);
  const [sortConfig, setSortConfig] = useState({
    key: null,
    direction: 'ascending',
  });
  const [loading, setLocalLoading] = useState(false);
  const [isInitialLoad, setIsInitialLoad] = useState(true);
  const [currentPage, setCurrentPage] = useState(1);
  const [pageSize, setPageSize] = useState(10);

  const fetchData = React.useCallback(async () => {
    setLoading(true);
    setLocalLoading(true);
    const initialData = await dashboardCache.get(getClusters);
    setData(initialData);
    setLoading(false);
    setLocalLoading(false);
    setIsInitialLoad(false);
  }, [setLoading]);

  // Use useMemo to compute sorted data
  const sortedData = React.useMemo(() => {
    let filteredData = data;
    // Filter if workspaceFilter is set and not 'ALL_WORKSPACES_VALUE'
    if (workspaceFilter && workspaceFilter !== ALL_WORKSPACES_VALUE) {
      filteredData = data.filter((item) => {
        const itemWorkspace = item.workspace || 'default'; // Treat missing/empty workspace as 'default'
        return itemWorkspace.toLowerCase() === workspaceFilter.toLowerCase();
      });
    }
    return sortData(filteredData, sortConfig.key, sortConfig.direction);
  }, [data, sortConfig, workspaceFilter]);

  // Expose fetchData to parent component
  React.useEffect(() => {
    if (refreshDataRef) {
      refreshDataRef.current = fetchData;
    }
  }, [refreshDataRef, fetchData]);

  useEffect(() => {
    setData([]);
    let isCurrent = true;

    fetchData();

    const interval = setInterval(() => {
      if (isCurrent) {
        fetchData();
      }
    }, refreshInterval);

    return () => {
      isCurrent = false;
      clearInterval(interval);
    };
  }, [refreshInterval, fetchData]);

  // Reset to first page when data changes
  useEffect(() => {
    setCurrentPage(1);
  }, [data.length]);

  const requestSort = (key) => {
    let direction = 'ascending';
    if (sortConfig.key === key && sortConfig.direction === 'ascending') {
      direction = 'descending';
    }
    setSortConfig({ key, direction });
  };

  const getSortDirection = (key) => {
    if (sortConfig.key === key) {
      return sortConfig.direction === 'ascending' ? ' ↑' : ' ↓';
    }
    return '';
  };

  // Calculate pagination using sortedData
  const totalPages = Math.ceil(sortedData.length / pageSize);
  const startIndex = (currentPage - 1) * pageSize;
  const endIndex = startIndex + pageSize;
  const paginatedData = sortedData.slice(startIndex, endIndex);

  // Page navigation handlers
  const goToPreviousPage = () => {
    setCurrentPage((page) => Math.max(page - 1, 1));
  };

  const goToNextPage = () => {
    setCurrentPage((page) => Math.min(page + 1, totalPages));
  };

  const handlePageSizeChange = (e) => {
    const newSize = parseInt(e.target.value, 10);
    setPageSize(newSize);
    setCurrentPage(1); // Reset to first page when changing page size
  };

  return (
    <div>
      <Card>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead
                className="sortable whitespace-nowrap"
                onClick={() => requestSort('status')}
              >
                Status{getSortDirection('status')}
              </TableHead>
              <TableHead
                className="sortable whitespace-nowrap"
                onClick={() => requestSort('cluster')}
              >
                Cluster{getSortDirection('cluster')}
              </TableHead>
              <TableHead
                className="sortable whitespace-nowrap"
                onClick={() => requestSort('user')}
              >
                User{getSortDirection('user')}
              </TableHead>
              <TableHead
                className="sortable whitespace-nowrap"
                onClick={() => requestSort('workspace')}
              >
                Workspace{getSortDirection('workspace')}
              </TableHead>
              <TableHead
                className="sortable whitespace-nowrap"
                onClick={() => requestSort('infra')}
              >
                Infra{getSortDirection('infra')}
              </TableHead>
              <TableHead
                className="sortable whitespace-nowrap"
                onClick={() => requestSort('resources_str')}
              >
                Resources{getSortDirection('resources_str')}
              </TableHead>
              <TableHead
                className="sortable whitespace-nowrap"
                onClick={() => requestSort('time')}
              >
                Started{getSortDirection('time')}
              </TableHead>
              <TableHead
                className="sortable whitespace-nowrap"
                onClick={() => requestSort('autostop')}
              >
                Autostop{getSortDirection('autostop')}
              </TableHead>
              <TableHead>Actions</TableHead>
            </TableRow>
          </TableHeader>

          <TableBody>
            {loading && isInitialLoad ? (
              <TableRow>
                <TableCell
                  colSpan={9}
                  className="text-center py-6 text-gray-500"
                >
                  <div className="flex justify-center items-center">
                    <CircularProgress size={20} className="mr-2" />
                    <span>Loading...</span>
                  </div>
                </TableCell>
              </TableRow>
            ) : paginatedData.length > 0 ? (
              paginatedData.map((item, index) => {
                return (
                  <TableRow key={index}>
                    <TableCell>
                      <StatusBadge status={item.status} />
                    </TableCell>
                    <TableCell>
                      <Link
                        href={`/clusters/${item.cluster}`}
                        className="text-blue-600"
                      >
                        {item.cluster}
                      </Link>
                    </TableCell>
                    <TableCell>{item.user}</TableCell>
                    <TableCell>
                      <Link
                        href="/workspaces"
                        className="text-blue-600 hover:underline"
                      >
                        {item.workspace || 'default'}
                      </Link>
                    </TableCell>
                    <TableCell>
                      <NonCapitalizedTooltip
                        content={item.full_infra || item.infra}
                        className="text-sm text-muted-foreground"
                      >
                        <span>
                          <Link
                            href="/infra"
                            className="text-blue-600 hover:underline"
                          >
                            {item.cloud}
                          </Link>
                          {item.infra.includes('(') && (
                            <span>
                              {' ' +
                                item.infra.substring(item.infra.indexOf('('))}
                            </span>
                          )}
                        </span>
                      </NonCapitalizedTooltip>
                    </TableCell>
                    <TableCell>
                      <NonCapitalizedTooltip
                        content={item.resources_str_full || item.resources_str}
                        className="text-sm text-muted-foreground"
                      >
                        <span>{item.resources_str}</span>
                      </NonCapitalizedTooltip>
                    </TableCell>
                    <TableCell>{relativeTime(item.time)}</TableCell>
                    <TableCell>
                      {formatAutostop(item.autostop, item.to_down)}
                    </TableCell>
                    <TableCell className="text-left">
                      <Status2Actions
                        cluster={item.cluster}
                        status={item.status}
                        onOpenSSHModal={onOpenSSHModal}
                        onOpenVSCodeModal={onOpenVSCodeModal}
                      />
                    </TableCell>
                  </TableRow>
                );
              })
            ) : (
              <TableRow>
                <TableCell
                  colSpan={9}
                  className="text-center py-6 text-gray-500"
                >
                  No active clusters
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </Card>

      {/* Pagination controls */}
      {data.length > 0 && (
        <div className="flex justify-end items-center py-2 px-4 text-sm text-gray-700">
          <div className="flex items-center space-x-4">
            <div className="flex items-center">
              <span className="mr-2">Rows per page:</span>
              <div className="relative inline-block">
                <select
                  value={pageSize}
                  onChange={handlePageSizeChange}
                  className="py-1 pl-2 pr-6 appearance-none outline-none cursor-pointer border-none bg-transparent"
                  style={{ minWidth: '40px' }}
                >
                  <option value={10}>10</option>
                  <option value={30}>30</option>
                  <option value={50}>50</option>
                  <option value={100}>100</option>
                  <option value={200}>200</option>
                </select>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-4 w-4 text-gray-500 absolute right-0 top-1/2 transform -translate-y-1/2 pointer-events-none"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M19 9l-7 7-7-7"
                  />
                </svg>
              </div>
            </div>
            <div>
              {startIndex + 1} – {Math.min(endIndex, data.length)} of{' '}
              {data.length}
            </div>
            <div className="flex items-center space-x-2">
              <Button
                variant="ghost"
                size="icon"
                onClick={goToPreviousPage}
                disabled={currentPage === 1}
                className="text-gray-500 h-8 w-8 p-0"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  className="chevron-left"
                >
                  <path d="M15 18l-6-6 6-6" />
                </svg>
              </Button>
              <Button
                variant="ghost"
                size="icon"
                onClick={goToNextPage}
                disabled={currentPage === totalPages || totalPages === 0}
                className="text-gray-500 h-8 w-8 p-0"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  className="chevron-right"
                >
                  <path d="M9 18l6-6-6-6" />
                </svg>
              </Button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export const handleVSCodeConnection = (cluster, onOpenVSCodeModal) => {
  if (onOpenVSCodeModal) {
    onOpenVSCodeModal(cluster);
  }
};

const handleConnect = (cluster, onOpenSSHModal) => {
  if (onOpenSSHModal) {
    onOpenSSHModal(cluster);
  } else {
    const uri = `ssh://${cluster}`;
    window.open(uri);
  }
};

// TODO(hailong): The enabled actions are also related to the `cloud` of the cluster
export const enabledActions = (status) => {
  switch (status) {
    case 'RUNNING':
      return ['connect', 'VSCode'];
    default:
      return [];
  }
};

const actionIcons = {
  connect: <Terminal className="w-4 h-4 text-gray-500 inline-block" />,
  VSCode: <SquareCode className="w-4 h-4 text-gray-500 inline-block" />,
};

export function Status2Actions({
  withLabel = false,
  cluster,
  status,
  onOpenSSHModal,
  onOpenVSCodeModal,
}) {
  const actions = enabledActions(status);
  const isMobile = useMobile();

  const handleActionClick = (actionName) => {
    switch (actionName) {
      case 'connect':
        handleConnect(cluster, onOpenSSHModal);
        break;
      case 'VSCode':
        handleVSCodeConnection(cluster, onOpenVSCodeModal);
        break;
      default:
        return;
    }
  };

  return (
    <>
      <div className="flex items-center space-x-4">
        {Object.entries(actionIcons).map(([actionName, actionIcon]) => {
          let label, tooltipText;
          switch (actionName) {
            case 'connect':
              label = 'Connect';
              tooltipText = 'Connect with SSH';
              break;
            case 'VSCode':
              label = 'VSCode';
              tooltipText = 'Open in VS Code';
              break;
            default:
              break;
          }
          if (!withLabel) {
            label = '';
          }
          if (actions.includes(actionName)) {
            return (
              <Tooltip
                key={actionName}
                content={tooltipText}
                className="capitalize text-sm text-muted-foreground"
              >
                <button
                  onClick={() => handleActionClick(actionName)}
                  className="text-sky-blue hover:text-sky-blue-bright font-medium inline-flex items-center"
                >
                  {actionIcon}
                  {!isMobile && <span className="ml-1.5">{label}</span>}
                </button>
              </Tooltip>
            );
          }
          return (
            <Tooltip
              key={actionName}
              content={tooltipText}
              className="capitalize text-sm text-muted-foreground"
            >
              <span
                className="opacity-30 flex items-center cursor-not-allowed text-sm"
                title={actionName}
              >
                {actionIcon}
                {!isMobile && <span className="ml-1.5">{label}</span>}
              </span>
            </Tooltip>
          );
        })}
      </div>
    </>
  );
}
