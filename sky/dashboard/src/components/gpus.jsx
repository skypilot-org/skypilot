/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/X5tLGA3WPNU
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */
import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import { CircularProgress } from '@mui/material';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Layout } from '@/components/elements/layout';
import { RotateCwIcon } from 'lucide-react';
import { useMobile } from '@/hooks/useMobile';
import { getGPUs } from '@/data/connectors/gpus';

// Set the refresh interval to 1 minute for GPU data
const GPU_REFRESH_INTERVAL = 60000;

export function GPUs() {
  const [loading, setLoading] = useState(true);
  const [isInitialLoad, setIsInitialLoad] = useState(true);
  const refreshDataRef = React.useRef(null);
  const isMobile = useMobile();

  const [allGPUs, setAllGPUs] = useState([]);
  const [perContextGPUs, setPerContextGPUs] = useState([]);
  const [perNodeGPUs, setPerNodeGPUs] = useState([]);

  const fetchData = React.useCallback(async () => {
    setLoading(true);
    try {
      const gpusResponse = await getGPUs();
      const {
        allGPUs: fetchedAllGPUs,
        perContextGPUs: fetchedPerContextGPUs,
        perNodeGPUs: fetchedPerNodeGPUs,
      } = gpusResponse;

      setAllGPUs(fetchedAllGPUs || []);
      setPerContextGPUs(fetchedPerContextGPUs || []);
      setPerNodeGPUs(fetchedPerNodeGPUs || []);
    } catch (err) {
      console.error('Error fetching data:', err);
      setAllGPUs([]);
      setPerContextGPUs([]);
      setPerNodeGPUs([]);
    } finally {
      setLoading(false);
      if (isInitialLoad) setIsInitialLoad(false);
    }
  }, [isInitialLoad]);

  React.useEffect(() => {
    if (refreshDataRef) {
      refreshDataRef.current = fetchData;
    }
  }, [refreshDataRef, fetchData]);

  useEffect(() => {
    let isCurrent = true;

    fetchData();

    const interval = setInterval(() => {
      if (isCurrent) {
        fetchData();
      }
    }, GPU_REFRESH_INTERVAL);

    return () => {
      isCurrent = false;
      clearInterval(interval);
    };
  }, [fetchData]);

  const handleRefresh = () => {
    if (refreshDataRef.current) {
      setIsInitialLoad(true);
      refreshDataRef.current();
    }
  };

  // Calculate summary data
  const totalGpuTypes = allGPUs.length;
  const grandTotalGPUs = allGPUs.reduce((sum, gpu) => sum + gpu.gpu_total, 0);
  const grandTotalFreeGPUs = allGPUs.reduce(
    (sum, gpu) => sum + gpu.gpu_free,
    0
  );

  // Group perContextGPUs by context
  const groupedPerContextGPUs = React.useMemo(() => {
    if (!perContextGPUs) return {};
    return perContextGPUs.reduce((acc, gpu) => {
      const { context } = gpu;
      if (!acc[context]) {
        acc[context] = [];
      }
      acc[context].push(gpu);
      return acc;
    }, {});
  }, [perContextGPUs]);

  // Group perNodeGPUs by context
  const groupedPerNodeGPUs = React.useMemo(() => {
    if (!perNodeGPUs) return {};
    return perNodeGPUs.reduce((acc, node) => {
      const { context } = node;
      if (!acc[context]) {
        acc[context] = [];
      }
      acc[context].push(node);
      return acc;
    }, {});
  }, [perNodeGPUs]);

  return (
    <Layout highlighted="gpus">
      <div className="flex items-center justify-between mb-4 h-5">
        <div className="text-base">
          <Link
            href="/gpus"
            className="text-sky-blue hover:underline leading-none"
          >
            GPUs
          </Link>
        </div>
        <div className="flex items-center space-x-2">
          {loading && (
            <div className="flex items-center mr-2">
              <CircularProgress size={15} className="mt-0" />
              <span className="ml-2 text-gray-500 text-sm">Loading...</span>
            </div>
          )}
          <Button
            variant="ghost"
            size="sm"
            onClick={handleRefresh}
            disabled={loading}
            className="text-sky-blue hover:text-sky-blue-bright"
            title="Refresh"
          >
            <RotateCwIcon className="h-4 w-4 mr-1.5" />
            {!isMobile && <span>Refresh</span>}
          </Button>
        </div>
      </div>

      {/* Initial loading spinner */}
      {isInitialLoad ? (
        <div className="flex flex-col items-center justify-center h-64">
          <CircularProgress size={32} className="mb-4" />
          <span className="text-gray-500 text-lg">Loading...</span>
        </div>
      ) : (
        <>
          {/* Summary Section */}
          {allGPUs.length > 0 ? (
            <Card className="mb-4 p-4">
              <h3 className="text-lg font-semibold mb-3">
                GPUs on Kubernetes
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                <Card className="p-4">
                  <p className="text-sm text-gray-500">Total GPU Types</p>
                  <p className="text-2xl font-bold">{totalGpuTypes}</p>
                </Card>
                <Card className="p-4">
                  <p className="text-sm text-gray-500">
                    Total GPUs (All Types)
                  </p>
                  <p className="text-2xl font-bold">{grandTotalGPUs}</p>
                </Card>
                <Card className="p-4">
                  <p className="text-sm text-gray-500">
                    Total Free GPUs (All Types)
                  </p>
                  <p className="text-2xl font-bold">{grandTotalFreeGPUs}</p>
                </Card>
              </div>

              <h4 className="text-md font-semibold mb-3">
                GPU Types
              </h4>
              <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4">
                {allGPUs.map((gpu) => {
                  const usedGpus = gpu.gpu_total - gpu.gpu_free;
                  const freePercentage =
                    gpu.gpu_total > 0
                      ? (gpu.gpu_free / gpu.gpu_total) * 100
                      : 0;
                  const usedPercentage =
                    gpu.gpu_total > 0 ? (usedGpus / gpu.gpu_total) * 100 : 0;
                  return (
                    <div key={gpu.gpu_name} className="p-2 border rounded w-full">
                      <div className="flex justify-between items-center mb-1">
                        <span className="font-medium">{gpu.gpu_name}</span>
                        <span className="text-sm text-gray-600">
                          {gpu.gpu_free} Free / {gpu.gpu_total} Total
                        </span>
                      </div>
                      <div className="w-full bg-gray-200 rounded h-6 flex overflow-hidden">
                        <div
                          style={{ width: `${usedPercentage}%` }}
                          className="bg-sky-500 h-full flex items-center justify-center text-white text-xs"
                          title={`Used: ${usedGpus} (${usedPercentage.toFixed(1)}%)`}
                        >
                          {usedGpus > 0 && usedPercentage > 10
                            ? `${usedGpus} Used`
                            : ''}
                        </div>
                        <div
                          style={{ width: `${freePercentage}%` }}
                          className="bg-green-700 h-full flex items-center justify-center text-white text-xs"
                          title={`Free: ${gpu.gpu_free} (${freePercentage.toFixed(1)}%)`}
                        >
                          {gpu.gpu_free > 0 && freePercentage > 10
                            ? `${gpu.gpu_free} Free`
                            : ''}
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>
            </Card>
          ) : (
            <Card className="mb-4 p-4">
              <h3 className="text-lg font-semibold mb-3">
                GPUs on Kubernetes
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                <p className="text-sm text-gray-500">No GPUs found</p>
              </div>
            </Card>
          )}

          {/* Per-Context GPU Summary Section */}
          {Object.keys(groupedPerContextGPUs).length > 0 && (
            <Card className="mb-4 p-4">
              <h3 className="text-lg font-semibold mb-3">
                Per-Context GPU
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {Object.entries(groupedPerContextGPUs).map(
                  ([context, gpusInContext]) => (
                    <Card key={context} className="p-4 border flex flex-col">
                      <h4 className="text-md font-normal mb-3">
                        Context: {context}
                      </h4>
                      <div className="space-y-3">
                        {gpusInContext.map((gpu) => {
                          const usedGpus = gpu.gpu_total - gpu.gpu_free;
                          const freePercentage =
                            gpu.gpu_total > 0
                              ? (gpu.gpu_free / gpu.gpu_total) * 100
                              : 0;
                          const usedPercentage =
                            gpu.gpu_total > 0
                              ? (usedGpus / gpu.gpu_total) * 100
                              : 0;
                          return (
                            <div
                              key={gpu.gpu_name}
                              className="p-2 border rounded w-full mb-2"
                            >
                              <div className="flex justify-between items-center mb-1">
                                <div>
                                  <span className="font-medium text-gray-800">
                                    {gpu.gpu_name}
                                  </span>
                                  <span className="text-xs text-gray-500 ml-2">
                                    (Requestable: {gpu.gpu_requestable_qty_per_node} / Node)
                                  </span>
                                </div>
                                <span className="text-sm text-gray-600">
                                  {gpu.gpu_free} Free / {gpu.gpu_total} Total
                                </span>
                              </div>
                              <div className="w-full bg-gray-200 rounded h-6 flex overflow-hidden mt-1">
                                <div
                                  style={{ width: `${usedPercentage}%` }}
                                  className="bg-sky-500 h-full flex items-center justify-center text-white text-xs"
                                  title={`Used: ${usedGpus} (${usedPercentage.toFixed(1)}%)`}
                                >
                                  {usedGpus > 0 && usedPercentage > 10
                                    ? `${usedGpus}`
                                    : ''}
                                </div>
                                <div
                                  style={{ width: `${freePercentage}%` }}
                                  className="bg-green-700 h-full flex items-center justify-center text-white text-xs"
                                  title={`Free: ${gpu.gpu_free} (${freePercentage.toFixed(1)}%)`}
                                >
                                  {gpu.gpu_free > 0 && freePercentage > 10
                                    ? `${gpu.gpu_free}`
                                    : ''}
                                </div>
                              </div>
                            </div>
                          );
                        })}
                      </div>

                      {/* Nodes Table within Context Card */}
                      {groupedPerNodeGPUs[context] &&
                        groupedPerNodeGPUs[context].length > 0 && (
                          <div className="mt-4 pt-3 border-t">
                            {/* <h5 className="text-sm font-semibold mb-2 text-gray-600">
                              Nodes in {context}:
                            </h5> */}
                            <div className="max-h-52 overflow-y-auto">
                              <div className="overflow-x-auto">
                                <table className="min-w-full text-sm border-b border-gray-200">
                                  <thead className="bg-gray-100 sticky top-0 z-10">
                                    <tr>
                                      <th className="p-2 text-left font-medium text-gray-600">
                                        Node Name
                                      </th>
                                      <th className="p-2 text-left font-medium text-gray-600">
                                        GPU
                                      </th>
                                      <th className="p-2 text-right font-medium text-gray-600">
                                        Availability
                                      </th>
                                    </tr>
                                  </thead>
                                  <tbody className="bg-white divide-y divide-gray-200">
                                    {groupedPerNodeGPUs[context].map(
                                      (node, index) => (
                                        <tr key={`${node.node_name}-${index}`}>
                                          <td className="p-2 whitespace-nowrap text-gray-700">
                                            {node.node_name}
                                          </td>
                                          <td className="p-2 whitespace-nowrap text-gray-700">
                                            {node.gpu_name}
                                          </td>
                                          <td className="p-2 whitespace-nowrap text-right text-gray-700">
                                            {`${node.gpu_free} of ${node.gpu_total} free`}
                                          </td>
                                        </tr>
                                      )
                                    )}
                                  </tbody>
                                </table>
                              </div>
                            </div>
                          </div>
                        )}
                    </Card>
                  )
                )}
              </div>
            </Card>
          )}
        </>
      )}
    </Layout>
  );
}
