# The template for the sky serve controller

setup: |
  # Install all cloud dependencies.
  # This is for multicloud support. To allow controller launch on all clouds,
  # we need to install all cloud dependencies.
  # This also includes all serve dependencies.
  pip install skypilot[all] > /dev/null 2>&1

  # Install gcloud CLI.
  {{google_sdk_installation_commands}}

file_mounts:
  {{remote_task_yaml_path}}: {{local_task_yaml_path}}

run: |
  # Create working directory for this services.
  mkdir -p {{service_dir}}
  # Start sky serve controller.
  python -u -m sky.serve.controller --service-name {{service_name}} \
    --task-yaml {{remote_task_yaml_path}} --controller-port {{controller_port}} \
    > {{controller_log_file}} 2>&1 &
  # Wait for controller to start.
  sleep 10
  # Start sky serve load balancer. We keep the load balancer running in the
  # foreground so that the job will not finish, thus prevent our controller
  # from auto down.
  python -u -m sky.serve.load_balancer --task-yaml {{remote_task_yaml_path}} \
    --load-balancer-port {{load_balancer_port}} --app-port {{app_port}} \
    --controller-addr http://localhost:{{controller_port}} \
    > {{load_balancer_log_file}} 2>&1

# Following environment variables are borrowed from spot-controller.yaml.j2.
# NOTE(dev): Keep this align with spot-controller.yaml.j2.
envs:
  SKYPILOT_USER_ID: {{logging_user_hash}}
  # skip cloud identity check for spot controller to avoid the overhead.
  SKYPILOT_SKIP_CLOUD_IDENTITY_CHECK: 1
  SKYPILOT_USER: {{user}}
{% if is_dev %}
  SKYPILOT_DEV: 1
{% endif %}
{% if is_debug %}
  SKYPILOT_DEBUG: 1
{% endif %}
{% if disable_logging %}
  SKYPILOT_DISABLE_USAGE_COLLECTION: 1
{% endif %}
