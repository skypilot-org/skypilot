syntax = "proto3";

package managed_jobs.v1;

service ManagedJobsService {
  // Get controller version.
  rpc GetVersion(GetVersionRequest) returns (GetVersionResponse);
  // Get the managed job queue with advanced filtering.
  rpc GetJobTable(GetJobTableRequest) returns (GetJobTableResponse);
  // Get all job IDs by name.
  rpc GetAllJobIdsByName(GetAllJobIdsByNameRequest) returns (GetAllJobIdsByNameResponse);
  // Cancel managed jobs.
  rpc CancelJobs(CancelJobsRequest) returns (CancelJobsResponse);
  // Stream managed job logs.
  rpc StreamLogs(StreamLogsRequest) returns (stream StreamLogsResponse);
}

enum ManagedJobStatus {
  MANAGED_JOB_STATUS_UNSPECIFIED = 0;
  MANAGED_JOB_STATUS_PENDING = 1;
  MANAGED_JOB_STATUS_SUBMITTED = 2;
  MANAGED_JOB_STATUS_STARTING = 3;
  MANAGED_JOB_STATUS_RUNNING = 4;
  MANAGED_JOB_STATUS_RECOVERING = 5;
  MANAGED_JOB_STATUS_CANCELLING = 6;
  MANAGED_JOB_STATUS_SUCCEEDED = 7;
  MANAGED_JOB_STATUS_CANCELLED = 8;
  MANAGED_JOB_STATUS_FAILED = 9;
  MANAGED_JOB_STATUS_FAILED_SETUP = 10;
  MANAGED_JOB_STATUS_FAILED_PRECHECKS = 11;
  MANAGED_JOB_STATUS_FAILED_NO_RESOURCE = 12;
  MANAGED_JOB_STATUS_FAILED_CONTROLLER = 13;
}

enum ManagedJobScheduleState {
  MANAGED_JOB_SCHEDULE_STATE_UNSPECIFIED = 0;
  MANAGED_JOB_SCHEDULE_STATE_INVALID = 1;
  MANAGED_JOB_SCHEDULE_STATE_INACTIVE = 2;
  MANAGED_JOB_SCHEDULE_STATE_WAITING = 3;
  MANAGED_JOB_SCHEDULE_STATE_ALIVE_WAITING = 4;
  MANAGED_JOB_SCHEDULE_STATE_LAUNCHING = 5;
  MANAGED_JOB_SCHEDULE_STATE_ALIVE_BACKOFF = 6;
  MANAGED_JOB_SCHEDULE_STATE_ALIVE = 7;
  MANAGED_JOB_SCHEDULE_STATE_DONE = 8;
}

message JobIds {
  repeated int64 ids = 1;
}

message UserHashes {
  repeated string hashes = 1;
}

message Statuses {
  repeated string statuses = 1;
}

message Fields {
  repeated string fields = 1;
}

message Workspaces {
  repeated string workspaces = 1;
}

message GetVersionRequest {}

message GetVersionResponse {
  string controller_version = 1;
}

message GetJobTableRequest {
  bool skip_finished = 1;
  optional Workspaces accessible_workspaces = 2;
  optional JobIds job_ids = 3;
  optional string workspace_match = 4;
  optional string name_match = 5;
  optional string pool_match = 6;
  optional int32 page = 7;
  optional int32 limit = 8;
  optional UserHashes user_hashes = 9;
  optional Statuses statuses = 10;
  bool show_jobs_without_user_hash = 11;
  optional Fields fields = 12;
}

message ManagedJobInfo {
  int64 job_id = 1;
  int64 task_id = 2;
  string job_name = 3;
  string task_name = 4;
  double job_duration = 5;
  optional string workspace = 6;
  ManagedJobStatus status = 7;
  ManagedJobScheduleState schedule_state = 8;
  string resources = 9;
  string cluster_resources = 10;
  string cluster_resources_full = 11;
  string cloud = 12;
  string region = 13;
  string infra = 14;
  map<string, float> accelerators = 15;
  int32 recovery_count = 16;
  optional string details = 17;
  optional string failure_reason = 18;
  optional string user_name = 19;
  optional string user_hash = 20;
  optional double submitted_at = 21;
  optional double start_at = 22;
  optional double end_at = 23;
  optional string user_yaml = 24;
  optional string entrypoint = 25;
  map<string, string> metadata = 26;
  optional string pool = 27;
  optional string pool_hash = 28;
  // The `spot.job_id`, which can be used to identify different tasks
  // for the same job
  optional int64 _job_id = 29;
}

message GetJobTableResponse {
  repeated ManagedJobInfo jobs = 1;
  int32 total = 2;
  int32 total_no_filter = 3;
  map<string, int32> status_counts = 4;
}

message GetAllJobIdsByNameRequest {
  optional string job_name = 1;
}

message GetAllJobIdsByNameResponse {
  repeated int64 job_ids = 1;
}

message CancelJobsRequest {
  string current_workspace = 1;
  optional string user_hash = 2;

  oneof cancellation_criteria {
    bool all_users = 3;
    JobIds job_ids = 4;
    string job_name = 5;
    string pool_name = 6;
  }
}

message CancelJobsResponse {
  string message = 1;
}

message StreamLogsRequest {
  optional string job_name = 1;
  optional int64 job_id = 2;
  bool follow = 3;
  bool controller = 4;
  optional int32 tail = 5;
}

message StreamLogsResponse {
  string log_line = 1;
  optional int32 exit_code = 2;
}
